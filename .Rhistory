Deviance.dif <- deviance_constb - deviance_full
Deviance.dif
Chisq.crit <- qchisq(0.95,1)
Chisq.crit
Deviance.dif>=Chisq.crit   # perform the LRT
pchisq(Deviance.dif,1)   # p-value
curve(dchisq(x,df=3),0,15)
abline(v=Deviance.dif,col="red",lwd=4)
1-pchisq(Deviance.dif,1)
pchisq(0.01,1)   # p-value
curve(dchisq(x,df=3),0,5)
abline(v=Deviance.dif,col="red",lwd=4)
Deviance.dif
curve(dchisq(x,df=3),0,5)
abline(v=Deviance.dif,col="red",lwd=4)
pchisq(0.1,1)   # p-value
curve(dchisq(x,df=1),0,5)
abline(v=Deviance.dif,col="red",lwd=4)
deviance_full <- 2*MLE_full$value
deviance_nowave <- 2*MLE_nowave$value
Deviance.dif <- deviance_nowave - deviance_full
Deviance.dif
Chisq.crit <- qchisq(0.95,3)   # now three additional params in the more complex model!
Chisq.crit
Deviance.dif>=Chisq.crit
1-pchisq(Deviance.dif,1)   # p-value
curve(dchisq(x,df=3),0,15)
abline(v=Deviance.dif,col="red",lwd=4)
deviance_full <- 2*MLE_full$value
deviance_nowave <- 2*MLE_nowave$value
Deviance.dif <- deviance_nowave - deviance_full
Deviance.dif
Chisq.crit <- qchisq(0.95,df=3)   # now three additional params in the more complex model!
Chisq.crit
Deviance.dif>=Chisq.crit
1-pchisq(Deviance.dif,df=3)   # p-value
PoisLik_nowave <- function(params){
a <- params[1]      # a parameters
b <- params[2]      # b parameter (not a function of wave/nonwave)
expcones <- a*fir$DBH^b
-sum(dpois(fir$TOTCONES,lambda=expcones,log=TRUE))
}
params <- c(a=1,b=1)
PoisLik_nowave(params)
MLE_pois <- optim(fn=PoisLik_nowave,par=params)
pchisq(0.1
,1)   # p-value
MLE_pois <- optim(fn=PoisLik_nowave,par=params)
MLE_constak$par
PoisLik_nowave <- function(params){
a <- params[1]      # a parameters
b <- params[2]      # b parameter (not a function of wave/nonwave)
expcones <- a*fir$DBH^b
-sum(dpois(fir$TOTCONES,lambda=expcones,log=TRUE))
}
params <- c(a=1,b=1)
PoisLik_nowave(params)
MLE_pois <- optim(fn=PoisLik_nowave,par=params)
MLE_pois
PoisLik_nowave <- function(params){
a <- params[1]      # a parameters
b <- params[2]      # b parameter (not a function of wave/nonwave)
expcones <- a*fir$DBH^b
-sum(dpois(fir$TOTCONES,lambda=expcones,log=TRUE))
}
params <- c(a=1,b=1)
PoisLik_nowave(params)
MLE_pois <- optim(fn=PoisLik_nowave,par=params)
MLE_pois$par
MLE_pois$value
deviance_pois <- 2*MLE_pois$value
AIC_constak <- deviance_constak + 2*4
AIC_full <- deviance_full + 2*6
AIC_nowave <- deviance_nowave + 2*3
AIC_pois <- deviance_pois + 2*2
AICtable <- data.frame(
Model = c("Full","Constant b","Constant a and k","All constant","Poisson"),
AIC = c(AIC_full,AIC_constb,AIC_constak,AIC_nowave,AIC_pois),
Deviance = c(deviance_full,deviance_constb,deviance_constak,deviance_nowave,deviance_pois),
params = c(6,5,4,3,2),
stringsAsFactors = F
)
AICtable$DeltaAIC <- AICtable$AIC-AICtable$AIC[which.min(AICtable$AIC)]
c(1,2,5,4,3)
AICtable[order(AICtable$AIC),c(1,2,5,4,3)]
probs1 <- dbinom(0:10,10,0.5)
names(probs1) = 0:10
barplot(probs1,ylab="probability")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(emdbook)
data(FirDBHFec)
fir <- na.omit(FirDBHFec[,c("TOTCONES","DBH","WAVE_NON")])
fir$TOTCONES <- round(fir$TOTCONES)
head(fir)
plot(fir$TOTCONES ~ fir$DBH)
ndx <- fir$WAVE_NON=="w"   # logical vector indicating which observations were from "wave" sites
plot(fir$TOTCONES[ndx] ~ fir$DBH[ndx],xlab="DBH",ylab="Tot Cones")
points(fir$DBH[!ndx],fir$TOTCONES[!ndx],pch=4,col="red")
legend("topleft",pch=c(1,4),col=c("black","red"),legend=c("Wave","Non-wave"),bty="n")
NegBinomLik_full <- function(params){
wave.code <- as.numeric(fir$WAVE_NON)      # convert to ones and twos
a <- c(params[1],params[2])[wave.code]     # a parameters
b <- c(params[3],params[4])[wave.code]      # b parameter (not a function of wave/nonwave)
k <- c(params[5],params[6])[wave.code]       # dispersion parameters
expcones <- a*fir$DBH^b
-sum(dnbinom(fir$TOTCONES,mu=expcones,size=k,log=TRUE))
}
params <- c(a.n=1,a.w=1,b.n=1,b.w=1,k.n=1,k.w=1)
NegBinomLik_full(params)
MLE_full <- optim(fn=NegBinomLik_full,par=c(a.n=1,a.w=1,b.n=1,b.w=1,k.n=1,k.w=1),method="L-BFGS-B")
MLE_full$par
MLE_full$value
NegBinomLik_constb <- function(params){
wave.code <- as.numeric(fir$WAVE_NON)      # convert to ones and twos
a <- c(params[1],params[2])[wave.code]      # a parameters
b <- params[3]                              # b parameter (not a function of wave/nonwave)
k <- c(params[4],params[5])[wave.code]      # dispersion parameters
expcones <- a*fir$DBH^b
-sum(dnbinom(fir$TOTCONES,mu=expcones,size=k,log=TRUE))
}
params <- c(a.n=1,a.w=1,b=1,k.n=1,k.w=1)
NegBinomLik_constb(params)
MLE_constb <- optim(fn=NegBinomLik_constb,par=c(a.n=1,a.w=1,b=1,k.n=1,k.w=1),method="L-BFGS-B")
MLE_constb$par
MLE_constb$value
deviance_full <- 2*MLE_full$value
deviance_constb <- 2*MLE_constb$value
deviance_full
deviance_constb
Deviance.dif <- deviance_constb - deviance_full
Deviance.dif
Chisq.crit <- qchisq(0.95,1)
Chisq.crit
Deviance.dif>=Chisq.crit   # perform the LRT
1-pchisq(Deviance.dif,1)   # p-value
curve(dchisq(x,df=1),0,5)
abline(v=Deviance.dif,col="red",lwd=4)
NegBinomLik_nowave <- function(params){
a <- params[1]      # a parameters
b <- params[2]      # b parameter (not a function of wave/nonwave)
k <- params[3]      # dispersion parameters
expcones <- a*fir$DBH^b
-sum(dnbinom(fir$TOTCONES,mu=expcones,size=k,log=TRUE))
}
params <- c(a=1,b=1,k=1)
NegBinomLik_nowave(params)
MLE_nowave <- optim(fn=NegBinomLik_nowave,par=params,method="L-BFGS-B")
MLE_nowave$par
MLE_nowave$value
deviance_full <- 2*MLE_full$value
deviance_nowave <- 2*MLE_nowave$value
Deviance.dif <- deviance_nowave - deviance_full
Deviance.dif
Chisq.crit <- qchisq(0.95,df=3)   # now three additional params in the more complex model!
Chisq.crit
Deviance.dif>=Chisq.crit
1-pchisq(Deviance.dif,df=3)   # p-value
curve(dchisq(x,df=3),0,15)
abline(v=Deviance.dif,col="red",lwd=4)
NegBinomLik_constak <- function(params){
wave.code <- as.numeric(fir$WAVE_NON)      # convert to ones and twos
a <- params[1]                             # a parameters
b <- c(params[2],params[3])[wave.code]                              # b parameter (not a function of wave/nonwave)
k <- params[4]                               # dispersion parameters
expcones <- a*fir$DBH^b
-sum(dnbinom(fir$TOTCONES,mu=expcones,size=k,log=TRUE))
}
params <- c(a=1,b.n=1,b.w=1,k=1)
NegBinomLik_constak(params)
MLE_constak <- optim(fn=NegBinomLik_constak,par=params)
MLE_constak$par
MLE_constak$value
deviance_constak <- 2*MLE_constak$value
PoisLik_nowave <- function(params){
a <- params[1]      # a parameters
b <- params[2]      # b parameter (not a function of wave/nonwave)
expcones <- a*fir$DBH^b
-sum(dpois(fir$TOTCONES,lambda=expcones,log=TRUE))
}
params <- c(a=1,b=1)
PoisLik_nowave(params)
MLE_pois <- optim(fn=PoisLik_nowave,par=params)
MLE_pois$par
MLE_pois$value
deviance_pois <- 2*MLE_pois$value
AIC_constak <- deviance_constak + 2*4
AIC_full <- deviance_full + 2*6
AIC_constb <- deviance_constb + 2*5
AIC_nowave <- deviance_nowave + 2*3
AIC_pois <- deviance_pois + 2*2
AICtable <- data.frame(
Model = c("Full","Constant b","Constant a and k","All constant","Poisson"),
AIC = c(AIC_full,AIC_constb,AIC_constak,AIC_nowave,AIC_pois),
Deviance = c(deviance_full,deviance_constb,deviance_constak,deviance_nowave,deviance_pois),
params = c(6,5,4,3,2),
stringsAsFactors = F
)
AICtable$DeltaAIC <- AICtable$AIC-AICtable$AIC[which.min(AICtable$AIC)]
AICtable[order(AICtable$AIC),c(1,2,5,4,3)]
probs1 <- dbinom(0:10,10,0.5)
names(probs1) = 0:10
barplot(probs1,ylab="probability")
curve(dbeta(x,1,1))
probs2 <- rep(1/11,times=11)
names(probs2) = 0:10
barplot(probs2,ylab="probability",ylim=c(0,1))
probs2 <- rep(1/11,times=11)
names(probs2) = 0:10
barplot(probs2,ylab="probability",ylim=c(0,1))
probs1 <- dbinom(0:10,10,0.5)
names(probs1) = 0:10
barplot(probs1,ylab="probability",add=T,col="red",density=20)
probs2 <- rep(1/11,times=11)
names(probs2) = 0:10
barplot(probs2,ylab="probability",ylim=c(0,1))
probs1 <- dbinom(0:10,10,0.5)
names(probs1) = 0:10
barplot(probs1,ylab="probability",add=T,col="red",density=20)
abline(v=3,col="green",lwd=4 )
BayesFactor = (1/11)/dbinom(2,10,0.5)
BayesFactor
lots=100000
hist(rbinom(lots,10,prob=rbeta(lots,1,1)),freq = F)
BayesFactor = dbinom(3,10,0.5)/(1/11)
BayesFactor
fir
?dnbinom
cat("
model  {
### Likelihood
for(i in 1:n.obs){
expected.cones[i] <- a[wave[i]]*pow(DBH[i],b[wave[i]])   # a*DBH^b
p[i] <- expected.cones[i]/n[wave[i]]
observed.cones[i] ~ dnegbin(p[i],n[wave[i]])
}
### Priors
for(j in 1:2){   # estimate separately for wave and non-wave
a[j] ~ dunif(0.001,1)
b[j] ~ dunif(0.05,5)
n[j] ~ dgamma(0.01,0.01)
}
}
",file="BUGS_fir.txt")
fir$WAVE_NON
as.numeric(fir$WAVE_NON)
data.package <- list(
observed.cones <- fir$TOTCONES,
n.obs <- nrow(fir),
wave <- as.numeric(fir$WAVE_NON)
)
data.package
init.generator <- function(){ list(
a = runif(2, 0.2,0.5),
b = runif(2, 2,3),
n = runif(2, 1,2)
)
}
init.generator
init.generator <- function(){ list(
a = runif(2, 0.2,0.5),
b = runif(2, 2,3),
n = runif(2, 1,2)
)
}
init.generator()
params.to.monitor <- c("a","b","n")
library(R2jags)    # load packages
library(coda)
library(lattice)
params.to.monitor <- c("a","b","n")
jags.fit <- jags(data=data.package,inits=init.generator,parameters.to.save=params.to.monitor,n.iter=50000,model.file="BUGS_fir.txt",n.chains = 3,n.burnin = 10000,n.thin=10 )
data.package <- list(
observed.cones = fir$TOTCONES,
n.obs = nrow(fir),
wave = as.numeric(fir$WAVE_NON)
)
data.package
params.to.monitor <- c("a","b","n")
jags.fit <- jags(data=data.package,inits=init.generator,parameters.to.save=params.to.monitor,n.iter=50000,model.file="BUGS_fir.txt",n.chains = 3,n.burnin = 10000,n.thin=10 )
data.package <- list(
observed.cones = fir$TOTCONES,
n.obs = nrow(fir),
wave = as.numeric(fir$WAVE_NON),
DBH = fir$DBH
)
data.package
jags.fit <- jags(data=data.package,inits=init.generator,parameters.to.save=params.to.monitor,n.iter=50000,model.file="BUGS_fir.txt",n.chains = 3,n.burnin = 10000,n.thin=10 )
cat("
model  {
### Likelihood
for(i in 1:n.obs){
expected.cones[i] <- a[wave[i]]*pow(DBH[i],b[wave[i]])   # a*DBH^b
p[i] <- expected.cones[i]/n[wave[i]]
observed.cones[i] ~ dnegbin(p[i],n[wave[i]])
}
### Priors
for(j in 1:2){   # estimate separately for wave and non-wave
a[j] ~ dunif(0.001,1)
b[j] ~ dunif(0.5,4)
n[j] ~ dgamma(0.01,0.01)
}
}
",file="BUGS_fir.txt")
data.package <- list(
observed.cones = fir$TOTCONES,
n.obs = nrow(fir),
wave = as.numeric(fir$WAVE_NON),
DBH = fir$DBH
)
data.package
library(R2jags)    # load packages
library(coda)
library(lattice)
params.to.monitor <- c("a","b","n")
jags.fit <- jags(data=data.package,inits=init.generator,parameters.to.save=params.to.monitor,n.iter=50000,model.file="BUGS_fir.txt",n.chains = 3,n.burnin = 10000,n.thin=10 )
init.generator <- function(){ list(
a = runif(2, 0.2,0.5),
b = runif(2, 2,3),
n = runif(2, 1,2)
)
}
init.generator()
data.package
cat("
model  {
### Likelihood
for(i in 1:n.obs){
expected.cones[i] <- a[wave[i]]*pow(DBH[i],b[wave[i]])   # a*DBH^b
p[i] <- expected.cones[i]/n[wave[i]]
observed.cones[i] ~ dnegbin(p[i],n[wave[i]])
}
### Priors
for(j in 1:2){   # estimate separately for wave and non-wave
a[j] ~ dunif(0.001,1)
b[j] ~ dunif(0.5,4)
n[j] ~ dunif(0.5,5)
}
}
",file="BUGS_fir.txt")
library(R2jags)    # load packages
library(coda)
library(lattice)
params.to.monitor <- c("a","b","n")
jags.fit <- jags(data=data.package,inits=init.generator,parameters.to.save=params.to.monitor,n.iter=50000,model.file="BUGS_fir.txt",n.chains = 3,n.burnin = 10000,n.thin=10 )
jags.fit <- jags(data=data.package,inits=init.generator,parameters.to.save=params.to.monitor,n.iter=50000,model.file="BUGS_fir.txt",n.chains = 3,n.burnin = 10000,n.thin=10 )
cat("
model  {
### Likelihood
for(i in 1:n.obs){
expected.cones[i] <- a[wave[i]]*pow(DBH[i],b[wave[i]])   # a*DBH^b
p[i] <- n[wave[i]] / (n[wave[i]] + expected.cones[i])
observed.cones[i] ~ dnegbin(p[i],r[wave[i]])
}
### Priors
for(j in 1:2){   # estimate separately for wave and non-wave
a[j] ~ dunif(0.001,1)
b[j] ~ dunif(0.5,4)
r[j] ~ dunif(0.5,5)
}
}
",file="BUGS_fir.txt")
data.package <- list(
observed.cones = fir$TOTCONES,
n.obs = nrow(fir),
wave = as.numeric(fir$WAVE_NON),
DBH = fir$DBH
)
#data.package
init.generator <- function(){ list(
a = runif(2, 0.2,0.5),
b = runif(2, 2,3),
r = runif(2, 1,2)
)
}
init.generator()
library(R2jags)    # load packages
library(coda)
library(lattice)
params.to.monitor <- c("a","b","n")
jags.fit <- jags(data=data.package,inits=init.generator,parameters.to.save=params.to.monitor,n.iter=50000,model.file="BUGS_fir.txt",n.chains = 3,n.burnin = 10000,n.thin=10 )
cat("
model  {
### Likelihood
for(i in 1:n.obs){
expected.cones[i] <- a[wave[i]]*pow(DBH[i],b[wave[i]])   # a*DBH^b
p[i] <- r[wave[i]] / (r[wave[i]] + expected.cones[i])
observed.cones[i] ~ dnegbin(p[i],r[wave[i]])
}
### Priors
for(j in 1:2){   # estimate separately for wave and non-wave
a[j] ~ dunif(0.001,1)
b[j] ~ dunif(0.5,4)
r[j] ~ dunif(0.5,5)
}
}
",file="BUGS_fir.txt")
jags.fit <- jags(data=data.package,inits=init.generator,parameters.to.save=params.to.monitor,n.iter=50000,model.file="BUGS_fir.txt",n.chains = 3,n.burnin = 10000,n.thin=10 )
library(R2jags)    # load packages
library(coda)
library(lattice)
params.to.monitor <- c("a","b","r")
jags.fit <- jags(data=data.package,inits=init.generator,parameters.to.save=params.to.monitor,n.iter=10000,model.file="BUGS_fir.txt",n.chains = 2,n.burnin = 2000,n.thin=5 )
jagsfit.mcmc <- as.mcmc(jags.fit)   # convert to "MCMC" object (coda package)
summary(jagsfit.mcmc)
plot(jagsfit.mcmc)
sink()
densityplot(jagsfit.mcmc)
densityplot(jagsfit.mcmc)
str(jagsfit.mcmc)
plot(density(jags.fit$BUGSoutput$sims.list$a[,1]))
plot(hist(jags.fit$BUGSoutput$sims.list$a[,1]))
hist(jags.fit$BUGSoutput$sims.list$a[,1])
hist(jags.fit$BUGSoutput$sims.list$a[,1],main="dispersion param",ylab="Prob",xlab="dispersion param")
hist(jags.fit$BUGSoutput$sims.list$a[,1],main="dispersion param",ylab="Prob",xlab="dispersion param",freq = F)
hist(jags.fit$BUGSoutput$sims.list$a[,1],main="dispersion param",ylab="Prob Density",xlab="dispersion param",freq = F)
hist(jags.fit$BUGSoutput$sims.list$a[,2],density=20,col="green",add=T)
jags.fit$BUGSoutput$sims.list$a
jags.fit$BUGSoutput$sims.list$a[,1]
jags.fit$BUGSoutput$sims.list$a[,2]
hist(jags.fit$BUGSoutput$sims.list$a[,1],main="dispersion param",ylab="Prob Density",xlab="dispersion param",freq = F)
hist(jags.fit$BUGSoutput$sims.list$a[,2],density=20,col="green",add=T,freq=F)
hist(jags.fit$BUGSoutput$sims.list$a[,1],main="dispersion param",ylab="Prob Density",xlab="dispersion param",freq = F,ylim=c(0,1.5))
hist(jags.fit$BUGSoutput$sims.list$a[,2],density=20,col="green",add=T,freq=F)
hist(jags.fit$BUGSoutput$sims.list$a[,1],main="dispersion param",ylab="Prob Density",xlab="dispersion param",freq = F,xlim=c(0,1.5))
hist(jags.fit$BUGSoutput$sims.list$a[,2],density=20,col="green",add=T,freq=F)
hist(jags.fit$BUGSoutput$sims.list$r[,1],main="dispersion param",ylab="Prob Density",xlab="dispersion param",freq = F)
hist(jags.fit$BUGSoutput$sims.list$r[,2],density=20,col="green",add=T,freq=F)
hist(jags.fit$BUGSoutput$sims.list$r[,1],main="dispersion param",ylab="Prob Density",xlab="dispersion param",freq = F,ylim=c(0,2))
hist(jags.fit$BUGSoutput$sims.list$r[,2],density=20,col="green",add=T,freq=F)
summary(jagsfit.mcmc)
jags.fit
jags.fit$DIC
jags.fit$DICbyR
jags.fit$DIC
summary(jags.fit)
summary(jags.fit)$DIC
summary(jags.fit)
str(summary(jags.fit))
jags.fit
jags.fit$model
jags.fit$BUGSoutput$summary
jags.fit$BUGSoutput$DIC
DIC_full <- jags.fit$BUGSoutput$DIC
DIC_full
fir$WAVE_NON
hist(jags.fit$BUGSoutput$sims.list$r[,1],main="dispersion param",ylab="Prob Density",xlab="dispersion param",freq = F,ylim=c(0,2))
hist(jags.fit$BUGSoutput$sims.list$r[,2],density=20,col="green",add=T,freq=F)
legend("upperright",col=c("green","white"),density=c(20,0),legend=c("wave","nonwave"),bty="n")
hist(jags.fit$BUGSoutput$sims.list$r[,1],main="dispersion param",ylab="Prob Density",xlab="dispersion param",freq = F,ylim=c(0,2))
hist(jags.fit$BUGSoutput$sims.list$r[,2],density=20,col="green",add=T,freq=F)
legend("topright",col=c("green","white"),density=c(20,0),legend=c("wave","nonwave"),bty="n")
cat("
model  {
### Likelihood
for(i in 1:n.obs){
expected.cones[i] <- a*pow(DBH[i],b)   # a*DBH^b
p[i] <- r / (r + expected.cones[i])
observed.cones[i] ~ dnegbin(p[i],r)
}
### Priors
a[j] ~ dunif(0.001,2)
b[j] ~ dunif(0.5,4)
r[j] ~ dunif(0.5,5)
}
",file="BUGS_fir_reduced.txt")
data.package <- list(
observed.cones = fir$TOTCONES,
n.obs = nrow(fir),
#wave = as.numeric(fir$WAVE_NON),
DBH = fir$DBH
)
#data.package
init.generator <- function(){ list(
a = runif(2, 0.2,0.5),
b = runif(2, 2,3),
r = runif(2, 1,2)
)
}
init.generator()
init.generator <- function(){ list(
a = runif(1, 0.2,0.5),
b = runif(1, 2,3),
r = runif(1, 1,2)
)
}
init.generator()
params.to.monitor <- c("a","b","r")
jags.fit <- jags(data=data.package,inits=init.generator,parameters.to.save=params.to.monitor,n.iter=10000,model.file="BUGS_fir_reduced.txt",n.chains = 2,n.burnin = 2000,n.thin=5 )
cat("
model  {
### Likelihood
for(i in 1:n.obs){
expected.cones[i] <- a*pow(DBH[i],b)   # a*DBH^b
p[i] <- r / (r + expected.cones[i])
observed.cones[i] ~ dnegbin(p[i],r)
}
### Priors
a ~ dunif(0.001,2)
b ~ dunif(0.5,4)
r ~ dunif(0.5,5)
}
",file="BUGS_fir_reduced.txt")
params.to.monitor <- c("a","b","r")
jags.fit <- jags(data=data.package,inits=init.generator,parameters.to.save=params.to.monitor,n.iter=10000,model.file="BUGS_fir_reduced.txt",n.chains = 2,n.burnin = 2000,n.thin=5 )
jagsfit.mcmc <- as.mcmc(jags.fit)   # convert to "MCMC" object (coda package)
summary(jagsfit.mcmc)
plot(jagsfit.mcmc)
summary(jagsfit.mcmc)
plot(jagsfit.mcmc)
DIC_reduced <- jags.fit$BUGSoutput$DIC
DIC_reduced
DIC_full
