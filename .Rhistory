ndx <- fir$WAVE_NON=="w"
plot(fir$TOTCONES[ndx] ~ fir$DBH[ndx],xlab="DBH",ylab="Tot Cones")
points(fir$DBH[!ndx],fir$TOTCONES[!ndx],pch=4,col="red")
legend("topleft",pch=c(1,4),col=c("black","red"),legend=c("Wave","Non-wave"))
library(emdbook)
data(FirDBHFec)
fir <- na.omit(FirDBHFec[,c("TOTCONES","DBH","WAVE_NON")])
fir$TOTCONES <- round(fir$TOTCONES)
head(fir)
plot(fir$TOTCONES ~ fir$DBH)
ndx <- fir$WAVE_NON=="w"
plot(fir$TOTCONES[ndx] ~ fir$DBH[ndx],xlab="DBH",ylab="Tot Cones")
points(fir$DBH[!ndx],fir$TOTCONES[!ndx],pch=4,col="red")
legend("topleft",pch=c(1,4),col=c("black","red"),legend=c("Wave","Non-wave"))
NegBinomLik_full <- function(params){
wave.code <- as.numeric(fir$WAVE_NON)
a <- c(params[1],params[2])[wave.code]
b <- c(params[3],params[4])[wave.code]
k <- c(params[5],params[6])[wave.code]
expcones <- a*fir$DBH^b
-sum(dnbinom(df$TOTCONES,mu=expcones,size=k,log=TRUE))
}
as.numeric(fir$WAVE_NON)
as.numeric(fir$WAVE_NON)
fir$WAVE_NON
params <- c(a.n=1,a.w=1,b.n=1,b.w=1,k.n=1,k.w=1)
NegBinomLik_full(params)
NegBinomLik_full <- function(params){
wave.code <- as.numeric(fir$WAVE_NON)
a <- c(params[1],params[2])[wave.code]
b <- c(params[3],params[4])[wave.code]
k <- c(params[5],params[6])[wave.code]
expcones <- a*fir$DBH^b
-sum(dnbinom(df$TOTCONES,mu=expcones,size=k,log=TRUE))
}
params <- c(a.n=1,a.w=1,b.n=1,b.w=1,k.n=1,k.w=1)
NegBinomLik_full(params)
NegBinomLik_full <- function(params){
wave.code <- as.numeric(fir$WAVE_NON)
a <- c(params[1],params[2])[wave.code]
b <- c(params[3],params[4])[wave.code]
k <- c(params[5],params[6])[wave.code]
expcones <- a*fir$DBH^b
-sum(dnbinom(fir$TOTCONES,mu=expcones,size=k,log=TRUE))
}
params <- c(a.n=1,a.w=1,b.n=1,b.w=1,k.n=1,k.w=1)
NegBinomLik_full(params)
?optim
MLE <- optim(fn=NegBinomLik_full,par=c(1,1,1,1,1,1),method="Nelder-Mead")
MLE$par
MLE$value
MLE <- optim(fn=NegBinomLik_full,par=c(a.n=1,a.w=1,b.n=1,b.w=1,k.n=1,k.w=1),method="Nelder-Mead")
MLE$par
MLE$value
MLE_full <- optim(fn=NegBinomLik_full,par=c(a.n=1,a.w=1,b.n=1,b.w=1,k.n=1,k.w=1),method="Nelder-Mead")
MLE_full$par
MLE_full$value
NegBinomLik_consta <- function(params){
wave.code <- as.numeric(fir$WAVE_NON)
a <- params[1]
b <- c(params[2],params[3])[wave.code]
k <- c(params[4],params[5])[wave.code]
expcones <- a*fir$DBH^b
-sum(dnbinom(fir$TOTCONES,mu=expcones,size=k,log=TRUE))
}
params <- c(a=1,b.n=1,b.w=1,k.n=1,k.w=1)
NegBinomLik_consta(params)
MLE_consta <- optim(fn=NegBinomLik_consta,par=c(a=1,b.n=1,b.w=1,k.n=1,k.w=1),method="Nelder-Mead")
MLE_consta$par
MLE_consta$value
NegBinomLik_consta <- function(params){
wave.code <- as.numeric(fir$WAVE_NON)
a <- params[1]
b <- c(params[2],params[3])[wave.code]
k <- c(params[4],params[5])[wave.code]
expcones <- a*fir$DBH^b
-sum(dnbinom(fir$TOTCONES,mu=expcones,size=k,log=TRUE))
}
params <- c(a=1,b.n=1,b.w=1,k.n=1,k.w=1)
NegBinomLik_consta(params)
MLE_consta <- optim(fn=NegBinomLik_consta,par=c(a=1,b.n=1,b.w=1,k.n=1,k.w=1),method="Nelder-Mead")
MLE_consta$par
MLE_consta$value
MLE_consta$par
MLE_consta <- optim(fn=NegBinomLik_consta,par=c(a=.6,b.n=1,b.w=1,k.n=1,k.w=1),method="Nelder-Mead")
MLE_consta$par
MLE_consta$value
MLE_consta <- optim(fn=NegBinomLik_consta,par=c(a=.6,b.n=1,b.w=1,k.n=1,k.w=1),method="Nelder-Mead")
MLE_consta$par
MLE_consta$value
NegBinomLik_constb <- function(params){
wave.code <- as.numeric(fir$WAVE_NON)
a <- c(params[1],params[2])[wave.code]
b <- params[3]
k <- c(params[4],params[5])[wave.code]
expcones <- a*fir$DBH^b
-sum(dnbinom(fir$TOTCONES,mu=expcones,size=k,log=TRUE))
}
params <- c(a.n=1,a.w=1,b=1,k.n=1,k.w=1)
NegBinomLik_constb(params)
MLE_constb <- optim(fn=NegBinomLik_constb,par=c(a.n=1,a.w=1,b=1,k.n=1,k.w=1),method="Nelder-Mead")
MLE_constb$par
MLE_constb$value
MLE_constb
MLE_full <- optim(fn=NegBinomLik_full,par=c(a.n=1,a.w=1,b.n=1,b.w=1,k.n=1,k.w=1),method="Nelder-Mead")
MLE_full$par
MLE_full$value
MLE_full
MLE_full <- optim(fn=NegBinomLik_full,par=c(a.n=1,a.w=1,b.n=1,b.w=1,k.n=1,k.w=1),method="L-BFGS-B")
MLE_full$par
MLE_full$value
MLE_full
MLE_constb <- optim(fn=NegBinomLik_constb,par=c(a.n=1,a.w=1,b=1,k.n=1,k.w=1),method="L-BFGS-B")
MLE_constb$par
MLE_constb$value
MLE_constb
deviance_full <- 2*MLE_full$value
deviance_constb <- 2*MLE_constb$value
deviance_full
deviance_constb
Likelihood.ratio <- deviance_constb - deviance_full
Likelihood.ratio
Chisq.crit <- qchisq(0.95,1)
Chisq.crit
Deviance.dif <- deviance_constb - deviance_full
Deviance.dif>=Chisq.crit
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
par(mfrow=c(2,1))
curve(dgamma(x, shape=0.01, rate=0.01),3,100,ylim=c(0,0.1),xlab="shape parameter",ylab="probability density", main="Prior")
curve(dgamma(x, shape=0.001, rate=0.001),0.01,0.5,ylim=c(0,1),xlab="scale parameter",ylab="probability density")
library(R2jags)
library(coda)
sink("BUGSmodel.txt")
cat("
model {
#############
# LIKELIHOOD
############
for(obs in 1:n.observations){
titer[obs] ~ dgamma(shape,rate)
}
#############
# PRIORS
############
shape ~ dgamma(0.01,0.01)
scale ~ dgamma(0.001,0.001)
rate <- 1/scale
}
")
sink()
myx.data.for.bugs <- list(
titer = Myx$titer,
n.observations = length(Myx$titer)
)
init.vals.for.bugs <- function(){
list(
shape=runif(1,20,100),
scale=runif(1,0.05,0.3)
)
}
init.vals.for.bugs()
init.vals.for.bugs()
params.to.store <- c("shape","scale")    # specify the parameters we want to get the posteriors for
jags.fit <- jags(data=myx.data.for.bugs,inits=init.vals.for.bugs,parameters.to.save=params.to.store,n.iter=50000,model.file="BUGSmodel.txt",n.chains = 3,n.burnin = 5000,n.thin = 20 )
myx.data.for.bugs <- list(
titer = Myx$titer,
n.observations = length(Myx$titer)
)
model {
par(mfrow=c(2,1))
curve(dgamma(x, shape=0.01, rate=0.01),3,100,ylim=c(0,0.1),xlab="shape parameter",ylab="probability density", main="Prior")
curve(dgamma(x, shape=0.001, rate=0.001),0.01,0.5,ylim=c(0,1),xlab="scale parameter",ylab="probability density")
library(R2jags)
library(coda)
library(emdbook)
MyxDat <- MyxoTiter_sum
Myx <- subset(MyxDat,grade==1)  #Data set from grade 1 of myxo data
head(Myx)
myx.data.for.bugs <- list(
titer = Myx$titer,
n.observations = length(Myx$titer)
)
myx.data.for.bugs
init.vals.for.bugs <- function(){
list(
shape=runif(1,20,100),
scale=runif(1,0.05,0.3)
)
}
init.vals.for.bugs()
init.vals.for.bugs()
inits = list(list(shape=90,scale=0.1), list(shape=50,scale=0.2), list(shape=150,scale=0.04))
params.to.store <- c("shape","scale")    # specify the parameters we want to get the posteriors for
jags.fit <- jags(data=myx.data.for.bugs,inits=init.vals.for.bugs,parameters.to.save=params.to.store,n.iter=50000,model.file="BUGSmodel.txt",n.chains = 3,n.burnin = 5000,n.thin = 20 )
jags.fit
shape95 = quantile(jags.fit$BUGSoutput$sims.list$shape,c(0.025,0.975))
scale95 = quantile(jags.fit$BUGSoutput$sims.list$scale,c(0.025,0.975))
shape95
scale95
mm = function(x,a,b) { a*x / (b+x) }
plot(Myx$titer~Myx$day,xlim=c(0,10),ylim=c(0,10))
curve(mm(x,a=9,b=0.7),from=0,to=10,add=T,col="red")
inits <- list(list(a=8, b=0.5, shape=90), list(a=10, b=1, shape=100), list(a=7, b=1.2, shape=70))
#Make a model file:
sink("myxomodel2.txt")
cat("
model {
for (i in 1:n) {
mean [ i ] <- a*day[ i ]/ (b + day[ i ])
rate [ i ] <- shape/mean[ i ]
titer [ i ] ~ dgamma (shape, rate[ i ])
}
##priors
a ~ dgamma (0.1, 0.1)
b ~ dgamma (0.1, 0.1)
shape ~ dgamma (0.01, 0.01)
}
")
sink()
datalist <- list(
titer=Myx$titer,
day=Myx$day,
n=nrow(Myx)
)
myxo2.bugs <- jags(data=datalist, inits=inits, parameters.to.save=c("a", "b", "shape"), model.file= "myxomodel2.txt", n.thin=5, n.chains=3, n.burnin=500, n.iter=5000)
myxo2.bugs
#Run this model through R2WinBUGS.
myxo2.mcmc <- as.mcmc(myxo2.bugs)
summary(myxo2.mcmc)
#plot(myxo2.mcmc)
densityplot(myxo2.mcmc)
library(coda)
densityplot(myxo2.mcmc)
library(lattice)
densityplot(myxo2.mcmc)
datalist <- list(
titer=Myx$titer,
day=Myx$day,
n=nrow(Myx)
)
myxo2.bugs <- jags(data=datalist, inits=inits, parameters.to.save=c("a", "b", "shape"), model.file= "myxomodel2.txt", n.thin=5, n.chains=3, n.burnin=500, n.iter=5000)
myxo2.bugs
plot(titer~day,data=myxdat,xlim=c(0,10),ylim=c(0,10))
inits <- list(list(a=8, b=0.5, shape=90), list(a=10, b=1, shape=100), list(a=7, b=1.2, shape=70))
#Make a model file:
sink("myxomodel2.txt")
cat("
model {
for (i in 1:n) {
mean [ i ] <- a*day[ i ]/ (b + day[ i ])
rate [ i ] <- shape/mean[ i ]
titer [ i ] ~ dgamma (shape, rate[ i ])
}
##priors
a ~ dgamma (0.1, 0.1)
b ~ dgamma (0.1, 0.1)
shape ~ dgamma (0.01, 0.01)
}
")
sink()
datalist <- list(
titer=Myx$titer,
day=Myx$day,
n=nrow(Myx)
)
myxo2.bugs <- jags(data=datalist, inits=inits, parameters.to.save=c("a", "b", "shape"), model.file= "myxomodel2.txt", n.thin=5, n.chains=3, n.burnin=500, n.iter=5000)
myxo2.bugs
#Run this model through R2WinBUGS.
myxo2.mcmc <- as.mcmc(myxo2.bugs)
summary(myxo2.mcmc)
library(lattice)
#plot(myxo2.mcmc)
densityplot(myxo2.mcmc)
inits <- list(list(a=8, b=0.5, shape=90), list(a=10, b=1, shape=100), list(a=7, b=1.2, shape=70))
#Make a model file:
sink("myxomodel2.txt")
cat("
model {
for (i in 1:n) {
mean [ i ] <- a*day[ i ]/ (b + day[ i ])
rate [ i ] <- shape/mean[ i ]
titer [ i ] ~ dgamma (shape, rate[ i ])
}
##priors
a ~ dgamma (0.1, 0.1)
b ~ dgamma (0.1, 0.1)
shape ~ dgamma (0.01, 0.01)
}
")
sink()
datalist <- list(
titer=Myx$titer,
day=Myx$day,
n=nrow(Myx)
)
myxo2.bugs <- jags(data=datalist, inits=inits, parameters.to.save=c("a", "b", "shape"), model.file= "myxomodel2.txt", n.thin=5, n.chains=3, n.burnin=500, n.iter=5000)
myxo2.bugs
#Run this model through R2WinBUGS.
myxo2.mcmc <- as.mcmc(myxo2.bugs)
summary(myxo2.mcmc)
library(lattice)
#plot(myxo2.mcmc)
densityplot(myxo2.mcmc)
summary(myxo2.mcmc)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
par(mfrow=c(2,1))
curve(dgamma(x, shape=0.01, rate=0.01),3,100,ylim=c(0,0.1),xlab="shape parameter",ylab="probability density", main="Prior")
curve(dgamma(x, shape=0.001, rate=0.001),0.01,0.5,ylim=c(0,1),xlab="scale parameter",ylab="probability density")
library(R2jags)
library(coda)
sink("BUGSmodel.txt")
cat("
model {
#############
# LIKELIHOOD
############
for(obs in 1:n.observations){
titer[obs] ~ dgamma(shape,rate)
}
#############
# PRIORS
############
shape ~ dgamma(0.01,0.01)
scale ~ dgamma(0.001,0.001)
rate <- 1/scale
}
")
sink()
library(emdbook)
MyxDat <- MyxoTiter_sum
Myx <- subset(MyxDat,grade==1)  #Data set from grade 1 of myxo data
head(Myx)
myx.data.for.bugs <- list(
titer = Myx$titer,
n.observations = length(Myx$titer)
)
myx.data.for.bugs
init.vals.for.bugs <- function(){
list(
shape=runif(1,20,100),
scale=runif(1,0.05,0.3)
)
}
init.vals.for.bugs()
init.vals.for.bugs()
inits = list(list(shape=90,scale=0.1), list(shape=50,scale=0.2), list(shape=150,scale=0.04))
params.to.store <- c("shape","scale")    # specify the parameters we want to get the posteriors for
jags.fit <- jags(data=myx.data.for.bugs,inits=init.vals.for.bugs,parameters.to.save=params.to.store,n.iter=50000,model.file="BUGSmodel.txt",n.chains = 3,n.burnin = 5000,n.thin = 20 )
jags.fit
jagsfit.mcmc <- as.mcmc(jags.fit)   # convert to "MCMC" object (coda package)
summary(jagsfit.mcmc)
plot(jagsfit.mcmc)
library(lattice)
densityplot(jagsfit.mcmc)
shape95 = quantile(jags.fit$BUGSoutput$sims.list$shape,c(0.025,0.975))
scale95 = quantile(jags.fit$BUGSoutput$sims.list$scale,c(0.025,0.975))
shape95
scale95
mm = function(x,a,b) { a*x / (b+x) }
plot(Myx$titer~Myx$day,xlim=c(0,10),ylim=c(0,10))
curve(mm(x,a=9,b=0.7),from=0,to=10,add=T,col="red")
inits <- list(list(a=8, b=0.5, shape=90), list(a=10, b=1, shape=100), list(a=7, b=1.2, shape=70))
#Make a model file:
sink("myxomodel2.txt")
cat("
model {
for (i in 1:n) {
mean [ i ] <- a*day[ i ]/ (b + day[ i ])
rate [ i ] <- shape/mean[ i ]
titer [ i ] ~ dgamma (shape, rate[ i ])
}
##priors
a ~ dgamma (0.1, 0.1)
b ~ dgamma (0.1, 0.1)
shape ~ dgamma (0.01, 0.01)
}
")
sink()
datalist <- list(
titer=Myx$titer,
day=Myx$day,
n=nrow(Myx)
)
myxo2.bugs <- jags(data=datalist, inits=inits, parameters.to.save=c("a", "b", "shape"), model.file= "myxomodel2.txt", n.thin=5, n.chains=3, n.burnin=500, n.iter=5000)
myxo2.bugs
#Run this model through R2WinBUGS.
myxo2.mcmc <- as.mcmc(myxo2.bugs)
summary(myxo2.mcmc)
library(lattice)
#plot(myxo2.mcmc)
densityplot(myxo2.mcmc)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
par(mfrow=c(2,1))
curve(dgamma(x, shape=0.01, rate=0.01),3,100,ylim=c(0,0.1),xlab="shape parameter",ylab="probability density", main="Prior")
curve(dgamma(x, shape=0.001, rate=0.001),0.01,0.5,ylim=c(0,1),xlab="scale parameter",ylab="probability density")
library(R2jags)
library(coda)
sink("BUGSmodel.txt")
cat("
model {
#############
# LIKELIHOOD
############
for(obs in 1:n.observations){
titer[obs] ~ dgamma(shape,rate)
}
#############
# PRIORS
############
shape ~ dgamma(0.01,0.01)
scale ~ dgamma(0.001,0.001)
rate <- 1/scale
}
")
sink()
library(emdbook)
MyxDat <- MyxoTiter_sum
Myx <- subset(MyxDat,grade==1)  #Data set from grade 1 of myxo data
head(Myx)
myx.data.for.bugs <- list(
titer = Myx$titer,
n.observations = length(Myx$titer)
)
myx.data.for.bugs
init.vals.for.bugs <- function(){
list(
shape=runif(1,20,100),
scale=runif(1,0.05,0.3)
)
}
init.vals.for.bugs()
init.vals.for.bugs()
inits = list(list(shape=90,scale=0.1), list(shape=50,scale=0.2), list(shape=150,scale=0.04))
params.to.store <- c("shape","scale")    # specify the parameters we want to get the posteriors for
jags.fit <- jags(data=myx.data.for.bugs,inits=init.vals.for.bugs,parameters.to.save=params.to.store,n.iter=50000,model.file="BUGSmodel.txt",n.chains = 3,n.burnin = 5000,n.thin = 20 )
jags.fit
jagsfit.mcmc <- as.mcmc(jags.fit)   # convert to "MCMC" object (coda package)
summary(jagsfit.mcmc)
plot(jagsfit.mcmc)
library(lattice)
densityplot(jagsfit.mcmc)
shape95 = quantile(jags.fit$BUGSoutput$sims.list$shape,c(0.025,0.975))
scale95 = quantile(jags.fit$BUGSoutput$sims.list$scale,c(0.025,0.975))
shape95
scale95
mm = function(x,a,b) { a*x / (b+x) }
plot(Myx$titer~Myx$day,xlim=c(0,10),ylim=c(0,10))
curve(mm(x,a=9,b=0.7),from=0,to=10,add=T,col="red")
inits <- list(list(a=8, b=0.5, shape=90), list(a=10, b=1, shape=100), list(a=7, b=1.2, shape=70))
#Make a model file:
sink("myxomodel2.txt")
cat("
model {
for (i in 1:n) {
mean [ i ] <- a*day[ i ]/ (b + day[ i ])
rate [ i ] <- shape/mean[ i ]
titer [ i ] ~ dgamma (shape, rate[ i ])
}
##priors
a ~ dgamma (0.1, 0.1)
b ~ dgamma (0.1, 0.1)
shape ~ dgamma (0.01, 0.01)
}
")
sink()
datalist <- list(
titer=Myx$titer,
day=Myx$day,
n=nrow(Myx)
)
myxo2.bugs <- jags(data=datalist, inits=inits, parameters.to.save=c("a", "b", "shape"), model.file= "myxomodel2.txt", n.thin=5, n.chains=3, n.burnin=500, n.iter=5000)
#myxo2.bugs
#Run this model through R2WinBUGS.
myxo2.mcmc <- as.mcmc(myxo2.bugs)
summary(myxo2.mcmc)
library(lattice)
#plot(myxo2.mcmc)
densityplot(myxo2.mcmc)
datalist <- list(
titer=Myx$titer,
day=Myx$day,
n=nrow(Myx)
)
myxo2.bugs <- jags(data=datalist, inits=inits, parameters.to.save=c("a", "b", "shape"), model.file= "myxomodel2.txt", n.thin=5, n.chains=3, n.burnin=500, n.iter=5000)
#myxo2.bugs
as.mcmc(myxo2.bugs)
plot(Myx$titer~Myx$day,xlim=c(0,10),ylim=c(0,10))
curve(mm(x,a=9,b=0.7),from=0,to=10,add=T,col="red")
datalist <- list(
titer=Myx$titer,
day=Myx$day,
n=nrow(Myx)
)
myxo2.bugs <- jags(data=datalist, inits=inits, parameters.to.save=c("a", "b", "shape"), model.file= "myxomodel2.txt", n.thin=5, n.chains=3, n.burnin=500, n.iter=5000)
#myxo2.bugs
inits <- list(list(a=8, b=0.5, shape=90), list(a=10, b=1, shape=100), list(a=7, b=1.2, shape=70))
#Make a model file:
sink("myxomodel2.txt")
cat("
model {
for (i in 1:n) {
mean [ i ] <- a*day[ i ]/ (b + day[ i ])
rate [ i ] <- shape/mean[ i ]
titer [ i ] ~ dgamma (shape, rate[ i ])
}
##priors
a ~ dgamma (0.1, 0.1)
b ~ dgamma (0.1, 0.1)
shape ~ dgamma (0.01, 0.01)
}
")
sink()
