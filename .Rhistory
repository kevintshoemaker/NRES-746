}
}
counter <- counter + 1
guesses[counter,] <- oldguess
}
# visualize!
image(x=shapevec,y=scalevec,z=surface2D,zlim=c(-1000,-30),col=topo.colors(12))
contour(x=shapevec,y=scalevec,z=surface2D,levels=c(-30,-40,-80,-500),add=T)
lines(guesses,col="red")
counter%%100
counter
MLE <- list(vals=startingvals,lik=GammaLikelihoodFunction(startingvals),step=0)
MLE
k <- 100
oldguess <- startingvals
counter <- 0
guesses <- matrix(0,nrow=10000,ncol=2)
colnames(guesses) <- names(startingvals)
MLE <- list(vals=startingvals,lik=GammaLikelihoodFunction(startingvals),step=0)
while(counter<10000){
newguess <- newGuess(oldguess)
loglikdif <- LikDif(oldguess,newguess)
if(loglikdif>0){
oldguess <- newguess
}else{
rand=runif(1)
if(rand <= exp(loglikdif/k)){
oldguess <- newguess   # accept even if worse!
}
}
counter <- counter + 1
if(counter%%100==0) k <- k*0.8
guesses[counter,] <- oldguess
thislik <- GammaLikelihoodFunction(oldguess)
if(thislik>MLE$lik) MLE <- list(vals=oldguess,lik=GammaLikelihoodFunction(oldguess),step=counter)
}
image(x=shapevec,y=scalevec,z=surface2D,zlim=c(-1000,-30),col=topo.colors(12))
contour(x=shapevec,y=scalevec,z=surface2D,levels=c(-30,-40,-80,-500),add=T)
lines(guesses,col="red")
points(MLE$vals,col="green",pch=20,cex=3)
k
MLE
MLE$vals[2]
image(x=shapevec,y=scalevec,z=surface2D,zlim=c(-1000,-30),col=topo.colors(12))
contour(x=shapevec,y=scalevec,z=surface2D,levels=c(-30,-40,-80,-500),add=T)
lines(guesses,col="red")
points(MLE$vals[1],MLE$vals[2],col="green",pch=20,cex=3)
#####
# Helper Functions
#####
## this function relects the worst vertex across the remaining vector
ReflectIt <- function(oldsimplex,WorstVertex){
## re-arrange simplex- worst must be first
worstndx <- which(names(oldsimplex)==WorstVertex)
otherndx <- c(1:3)[-worstndx]
newndx <- c(worstndx,otherndx)
## translate so that vertex 2 is the origin (0,0)
translate <- oldsimplex[[newndx[2]]]
newsimplex <- list(oldsimplex[[1]]-translate,oldsimplex[[2]]-translate,oldsimplex[[3]]-translate)
## use vector reflection (reflect vertex 1 over a vector containing the origin and vertex 3) to find the reflection across a vector that includes the origin
vdotl <- sum(newsimplex[[newndx[1]]]*newsimplex[[newndx[3]]])
ldotl <- sum(newsimplex[[newndx[3]]]*newsimplex[[newndx[3]]])
projection <- (vdotl/ldotl)*newsimplex[[newndx[3]]]
reflected <- 2*projection-newsimplex[[newndx[1]]]
## translate back to the likelihood surface
newsimplex[[newndx[1]]] <- reflected
newsimplex <- list(newsimplex[[1]]+translate,newsimplex[[2]]+translate,newsimplex[[3]]+translate)
## return the new simplex
names(newsimplex) <- names(oldsimplex)
## generate some alternative jumps (or "oozes"!)...
oldpoint <- oldsimplex[[worstndx]]
newpoint <- newsimplex[[worstndx]]
newpoint2 <- newpoint-oldpoint
double <- newpoint2 * 2
half <- newpoint2 * 0.25
alternates <- list()
alternates$reflected <- newsimplex
alternates$double <- newsimplex
alternates$half <- newsimplex
alternates$double[[worstndx]] <- double + oldpoint
alternates$half[[worstndx]] <- half + oldpoint
return(alternates)
}
ShrinkIt <- function(oldsimplex,BestVertex){
newsimplex <- oldsimplex
## indices...
bestndx <- which(names(oldsimplex)==BestVertex)
otherndx <- c(1:3)[-bestndx]
translate <- oldsimplex[[bestndx]]
i=2
for(i in otherndx){
newvector <- oldsimplex[[i]]-translate
shrinkvector <- newvector * 0.5
newsimplex[[i]] <- shrinkvector + translate
}
return(newsimplex)
}
MoveTheSimplex <- function(oldsimplex){     # incomplete nelder-mead
newsimplex <- oldsimplex  #
# Start by identifying the *worst* vertex (the one with the lowest likelihood)
VertexLik <- SimplexLik(newsimplex)
WorstLik <- min(VertexLik)
WorstVertex <- names(VertexLik[which.min(VertexLik)])    # identify vertex with lowest likelihood
candidates <- ReflectIt(oldsimplex=newsimplex,WorstVertex)      # reflect across the remaining edge
CandidateLik <- sapply(candidates,SimplexLik)                          # re-evaluate likelihood at the vertices...
CandidateLik <- apply(CandidateLik,c(1,2), function(t) ifelse(is.nan(t),-99999,t))
bestCandidate <- names(which.max(CandidateLik[WorstVertex,]))
bestCandidateLik <- CandidateLik[WorstVertex,bestCandidate]
if(bestCandidateLik>=WorstLik){
newsimplex <- candidates[[bestCandidate]]
} else{
BestVertex <- names(VertexLik[which.max(VertexLik)])
newsimplex <- ShrinkIt(oldsimplex,BestVertex)
}
return(newsimplex)
}
oldsimplex <- simplex
newsimplex <- MoveTheSimplex(oldsimplex)
image(x=shapevec,y=scalevec,z=surface2D,zlim=c(-1000,-30),col=topo.colors(12))
contour(x=shapevec,y=scalevec,z=surface2D,levels=c(-30,-40,-80,-500),add=T)
addSimplex(oldsimplex,col="green")
addSimplex(newsimplex)
oldsimplex <- newsimplex
newsimplex <- MoveTheSimplex(oldsimplex)
image(x=shapevec,y=scalevec,z=surface2D,zlim=c(-1000,-30),col=topo.colors(12))
contour(x=shapevec,y=scalevec,z=surface2D,levels=c(-30,-40,-80,-500),add=T)
addSimplex(oldsimplex,col="green")
addSimplex(newsimplex)
SimplexMethod <- function(firstguess,tolerance=0.000001){
initsimplex <- list()
initsimplex[['vertex1']] <- firstguess + c(5,0.05)
initsimplex[['vertex2']] <- firstguess + c(-5,-0.05)
initsimplex[['vertex3']] <- firstguess + c(5,-0.05)
VertexLik <- SimplexLik(initsimplex)
oldbestlik <- VertexLik[which.max(VertexLik)]
deltalik <- 100
counter <- 0
while(counter<100){
newsimplex <- MoveTheSimplex(oldsimplex)
VertexLik <- SimplexLik(newsimplex)
bestlik <- VertexLik[which.max(VertexLik)]
deltalik <- bestlik-oldbestlik
oldsimplex <- newsimplex
oldbestlik <- bestlik
counter <- counter+1
}
mle <- list()
mle$estimate <- newsimplex[[1]]
mle$likelihood <- bestlik
mle$iterations <- counter
return(mle)
}
SimplexMethod(firstguess = c(shape=39,scale=0.28))
k <- 100
oldguess <- startingvals
counter <- 0
guesses <- matrix(0,nrow=10000,ncol=2)
colnames(guesses) <- names(startingvals)
MLE <- list(vals=startingvals,lik=GammaLikelihoodFunction(startingvals),step=0)
while(counter<10000){
newguess <- newGuess(oldguess)
loglikdif <- LikDif(oldguess,newguess)
if(loglikdif>0){
oldguess <- newguess
}else{
rand=runif(1)
if(rand <= exp(loglikdif/k)){
oldguess <- newguess   # accept even if worse!
}
}
counter <- counter + 1
if(counter%%100==0) k <- k*0.8
guesses[counter,] <- oldguess
thislik <- GammaLikelihoodFunction(oldguess)
if(thislik>MLE$lik) MLE <- list(vals=oldguess,lik=GammaLikelihoodFunction(oldguess),step=counter)
}
# visualize!
image(x=shapevec,y=scalevec,z=surface2D,zlim=c(-1000,-30),col=topo.colors(12))
contour(x=shapevec,y=scalevec,z=surface2D,levels=c(-30,-40,-80,-500),add=T)
lines(guesses,col="red")
points(MLE$vals[1],MLE$vals[2],col="green",pch=20,cex=3)
MLE
image(x=shapevec,y=scalevec,z=surface2D,zlim=c(-1000,-30),col=topo.colors(12))
contour(x=shapevec,y=scalevec,z=surface2D,levels=c(-30,-40,-80,-500),add=T)
lines(guesses,col="red")
points(MLE$vals[1],MLE$vals[2],col="green",pch=20,cex=3)
k <- 100
oldguess <- startingvals
counter <- 0
guesses <- matrix(0,nrow=10000,ncol=2)
colnames(guesses) <- names(startingvals)
MLE <- list(vals=startingvals,lik=GammaLikelihoodFunction(startingvals),step=0)
while(counter<10000){
newguess <- newGuess(oldguess)
loglikdif <- LikDif(oldguess,newguess)
if(loglikdif>0){
oldguess <- newguess
}else{
rand=runif(1)
if(rand <= exp(loglikdif/k)){
oldguess <- newguess   # accept even if worse!
}
}
counter <- counter + 1
if(counter%%100==0) k <- k*0.8
guesses[counter,] <- oldguess
thislik <- GammaLikelihoodFunction(oldguess)
if(thislik>MLE$lik) MLE <- list(vals=oldguess,lik=GammaLikelihoodFunction(oldguess),step=counter)
}
# visualize!
image(x=shapevec,y=scalevec,z=surface2D,zlim=c(-1000,-30),col=topo.colors(12))
contour(x=shapevec,y=scalevec,z=surface2D,levels=c(-30,-40,-80,-500),add=T)
lines(guesses,col="red")
points(MLE$vals[1],MLE$vals[2],col="green",pch=20,cex=3)
MLE
image(x=shapevec,y=scalevec,z=surface2D,zlim=c(-1000,-30),col=topo.colors(12))
contour(x=shapevec,y=scalevec,z=surface2D,levels=c(-30,-40,-80,-500),add=T)
lines(guesses,col="red")
points(MLE$vals[1],MLE$vals[2],col="green",pch=20,cex=3)
MLE
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
curve(dunif(x))
curve(dunif(x),ylim=c(0,1))
curve(dunif(x),ylim=c(0,2),col="red")
hist(runif(1000),density = T)
hist(runif(1000),freq=F,,ylim=c(0,2),col="red")
hist(runif(10000),freq=F,,ylim=c(0,2),col="red")
curve(dbeta(x,1,1),ylim=c(0,2),col="red")
hist(rbeta(10000,1,1),freq=F,,ylim=c(0,2),col="red")
likelihood <- dbinom(data,N=10,p=seq(0,1,by=0.001))
data = 3
dbinom
likelihood <- dbinom(data,size=10,prob=seq(0,1,by=0.001))
param.space <- seq(0,1,by=0.001)
likelihood <- dbinom(data,size=10,prob=param.space)
plot(param.space,likelihood)
plot(param.space,likelihood,type="l")
plot(param.space,likelihood,type="l",col="red")
plot(param.space,likelihood,type="l",col="red",lwd=2)
plot(param.space,likelihood,type="l",col="red",lwd=2)
curve(dbeta(x,1,1),col="blue",add=T)
curve(dbeta(x,1,1),ylim=c(0,2),col="blue",add=T,xlab="probability")
curve(dbeta(x,1,1),ylim=c(0,2),col="blue",add=T,ylab="Probability",xlab="param.space")
points(param.space,likelihood*5,type="l",col="red",lwd=2)
curve(dbeta(x,1,1),ylim=c(0,2),col="blue",add=T,ylab="Probability",xlab="param.space")
points(param.space,likelihood*5,type="l",col="red",lwd=2)
curve(dbeta(x,1,1),ylim=c(0,2),col="blue",add=T,ylab="Probability",xlab="param.space")
points(param.space,likelihood*5,type="l",col="red",lwd=2)
axis(4,at=seq(0,2,by=0.4),labels = seq(0,0.5,by=.1))
?axis
curve(dbeta(x,1,1),ylim=c(0,2),col="blue",add=T,ylab="Probability",xlab="param.space")
points(param.space,likelihood*5,type="l",col="red",lwd=2)
axis(4,at=seq(0,2,by=0.4),labels = seq(0,0.5,by=.1))
mtext("Likelihood", side=4, col="red")
?mtext
curve(dbeta(x,1,1),ylim=c(0,2),col="blue",add=T,ylab="Probability",xlab="param.space")
points(param.space,likelihood*5,type="l",col="red",lwd=2)
axis(4,at=seq(0,2,by=0.4),labels = seq(0,0.5,by=.1))
mtext("Likelihood", side=4, col="red",outer=T)
curve(dbeta(x,1,1),ylim=c(0,2),col="blue",add=T,ylab="Probability",xlab="param.space")
points(param.space,likelihood*5,type="l",col="red",lwd=2)
axis(4,at=seq(0,2,by=0.4),labels = seq(0,0.5,by=.1))
mtext("Likelihood", side=4, col="red",padj=0)
data = 3
param.space <- seq(0,1,by=0.001)
likelihood <- dbinom(data,size=10,prob=param.space)
curve(dbeta(x,1,1),ylim=c(0,2),col="blue",add=T,ylab="Probability",xlab="param.space")
points(param.space,likelihood*5,type="l",col="red",lwd=2)
axis(4,at=seq(0,2,by=0.4),labels = seq(0,0.5,by=.1))
mtext("Likelihood", side=4, col="red",padj=1)
par(mai=c(1,1,1,1))
curve(dbeta(x,1,1),ylim=c(0,2),col="blue",add=T,ylab="Probability",xlab="param.space")
points(param.space,likelihood*5,type="l",col="red",lwd=2)
axis(4,at=seq(0,2,by=0.4),labels = seq(0,0.5,by=.1))
mtext("Likelihood", side=4, col="red",padj=1)
data = 3
param.space <- seq(0,1,by=0.001)
likelihood <- dbinom(data,size=10,prob=param.space)
par(mai=c(1,1,1,1))
curve(dbeta(x,1,1),ylim=c(0,2),col="blue",add=T,ylab="Probability",xlab="param.space")
points(param.space,likelihood*5,type="l",col="red",lwd=2)
axis(4,at=seq(0,2,by=0.4),labels = seq(0,0.5,by=.1))
mtext("Likelihood", side=4, col="red",padj=1)
data = 3
param.space <- seq(0,1,by=0.001)
likelihood <- dbinom(data,size=10,prob=param.space)
par(mai=c(1,1,0,1))
curve(dbeta(x,1,1),ylim=c(0,2),col="blue",add=T,ylab="Probability",xlab="param.space")
points(param.space,likelihood*5,type="l",col="red",lwd=2)
axis(4,at=seq(0,2,by=0.4),labels = seq(0,0.5,by=.1))
mtext("Likelihood", side=4, col="red",padj=1)
par(mai=c(1,1,0,1))
curve(dbeta(x,1,1),ylim=c(0,2),col="blue",add=T,ylab="Probability",xlab="param.space")
points(param.space,likelihood*5,type="l",col="red",lwd=2)
axis(4,at=seq(0,2,by=0.4),labels = seq(0,0.5,by=.1))
mtext("Likelihood", side=4, col="red",padj=1)
curve(dbeta(x,1,1),ylim=c(0,2),col="blue",add=T,ylab="Probability",xlab="param.space")
points(param.space,likelihood*5,type="l",col="red",lwd=2)
axis(4,at=seq(0,2,by=0.4),labels = seq(0,0.5,by=.1))
mtext("Likelihood", side=4, col="red",line=3)
par(mai=c(1,1,0,1))
curve(dbeta(x,1,1),ylim=c(0,2),col="blue",add=T,ylab="Probability",xlab="param.space")
points(param.space,likelihood*5,type="l",col="red",lwd=2)
axis(4,at=seq(0,2,by=0.4),labels = seq(0,0.5,by=.1))
mtext("Likelihood", side=4, col="red",line=3)
par(mai=c(1,1,0,1))
curve(dbeta(x,1,1),ylim=c(0,2),col="blue",ylab="Probability",xlab="param.space")
points(param.space,likelihood*5,type="l",col="red",lwd=2)
axis(4,at=seq(0,2,by=0.4),labels = seq(0,0.5,by=.1))
mtext("Likelihood", side=4, col="red",line=3)
data = 3
param.space <- seq(0,1,by=0.001)
likelihood <- dbinom(data,size=10,prob=param.space)
par(mai=c(1,1,0,1))
curve(dbeta(x,1,1),ylim=c(0,2),col="blue",ylab="Probability",xlab="param.space")
points(param.space,likelihood*5,type="l",col="red",lwd=2)
axis(4,at=seq(0,2,by=0.4),labels = seq(0,0.5,by=.1))
mtext("Likelihood", side=4, col="red",line=3)
prior <- dbeta(data,shape1=1,shape2=1)
prior
prior <- dbeta(param.space,shape1=1,shape2=1)
prior
weighted.likelihood <- likelihood*prior
normalization.constant <- sum(weighted.likelihood)
prior <- dbeta(param.space,shape1=1,shape2=1)
prior
## weight the data likelihood by the prior
weighted.likelihood <- likelihood*prior
## compute normalization constant
normalization.constant <- sum(weighted.likelihood)
## Posterior!!
posterior <- weighted.likelihood/normalization.constant
## Plot it out!
par(mai=c(1,1,0,1))
curve(dbeta(x,1,1),ylim=c(0,5),col="blue",ylab="Probability",xlab="param.space")
points(param.space,posterior,type="l",col="blue",lwd=2,lty=2)
points(param.space,likelihood*5,type="l",col="red",lwd=2)
axis(4,at=seq(0,2,by=0.4),labels = seq(0,0.5,by=.1))
mtext("Likelihood", side=4, col="red",line=3)
sum(weighted.likelihood)
prior <- dbeta(param.space,shape1=1,shape2=1)
#prior
## weight the data likelihood by the prior
weighted.likelihood <- likelihood*prior
## compute normalization constant
normalization.constant <- sum(weighted.likelihood)
## Posterior!!
posterior <- weighted.likelihood/normalization.constant
## Plot it out!
par(mai=c(1,1,0,1))
plot(param.space,prior,ylim=c(0,1.2),type="l",lwd=2,col="blue",ylab="Probability",xlab="param.space")
points(param.space,posterior,type="l",col="blue",lwd=2,lty=2)
points(param.space,likelihood*5,type="l",col="red",lwd=2)
axis(4,at=seq(0,2,by=0.4),labels = seq(0,0.5,by=.1))
mtext("Likelihood", side=4, col="red",line=3)
posterior
prior
prior/sum(prior)
par(mai=c(1,1,0,1))
plot(param.space,prior/sum(prior),ylim=c(0,0.01),type="l",lwd=2,col="blue",ylab="Probability",xlab="param.space")
points(param.space,posterior,type="l",col="blue",lwd=2,lty=2)
points(param.space,likelihood/100,type="l",col="red",lwd=2)
axis(4,at=seq(0,0.01,by=0.002),labels = seq(0,0.5,by=.1))
mtext("Likelihood", side=4, col="red",line=3)
prior <- dbeta(param.space,shape1=1,shape2=1)
#prior
## weight the data likelihood by the prior
weighted.likelihood <- likelihood*prior
## compute normalization constant
normalization.constant <- sum(weighted.likelihood)
## Posterior!!
posterior <- weighted.likelihood/normalization.constant
## Plot it out!
par(mai=c(1,1,0,1))
plot(param.space,prior,ylim=c(0,5),type="l",lwd=2,col="blue",ylab="Probability",xlab="param.space")
points(param.space,posterior*length(param.space),type="l",col="blue",lwd=2,lty=2)
points(param.space,likelihood*5,type="l",col="red",lwd=2)
axis(4,at=seq(0,2,by=0.4),labels = seq(0,0.5,by=.1))
mtext("Likelihood", side=4, col="red",line=3)
prior <- dbeta(param.space,shape1=15,shape2=5)
weighted.likelihood <- likelihood*prior
normalization.constant <- sum(weighted.likelihood)
posterior <- weighted.likelihood/normalization.constant
par(mai=c(1,1,0,1))
plot(param.space,prior,ylim=c(0,5),type="l",lwd=2,col="blue",ylab="Probability",xlab="param.space")
points(param.space,posterior*length(param.space),type="l",col="blue",lwd=2,lty=2)
points(param.space,likelihood*5,type="l",col="red",lwd=1)
axis(4,at=seq(0,2,by=0.4),labels = seq(0,0.5,by=.1))
mtext("Likelihood", side=4, col="red",line=3)
curve(dbeta,1,1,ylab="Prob Density",col="blue",lwd=2)
curve(dbeta(x,1,1),ylab="Prob Density",col="blue",lwd=2)
curve(dbeta(x,1,1),ylim=c(0,4),ylab="Prob Density",col="blue",lwd=2)
curve(dbeta(x,1,1),ylim=c(0,4),ylab="Prob Density",col="blue",lwd=2,xlab="param.space")
data
### PRIOR
curve(dbeta(x,1,1),ylim=c(0,4),ylab="Prob Density",col="blue",lwd=2,xlab="param.space")
### POSTERIOR
curve(dbeta(x,1+data,1+(10-data)),ylim=c(0,4),ylab="Prob Density",col="blue",lwd=2,lty=1,xlab="param.space",add=T)
### PRIOR
curve(dbeta(x,1,1),ylim=c(0,4),ylab="Prob Density",col="blue",lwd=2,xlab="param.space")
### POSTERIOR
curve(dbeta(x,1+data,1+(10-data)),ylim=c(0,4),ylab="Prob Density",col="blue",lwd=2,lty=2,xlab="param.space",add=T)
### PRIOR
curve(dbeta(x,15,5),ylim=c(0,4),ylab="Prob Density",col="blue",lwd=2,xlab="param.space")
### POSTERIOR
curve(dbeta(x,15+data,5+(10-data)),ylim=c(0,4),ylab="Prob Density",col="blue",lwd=2,lty=2,xlab="param.space",add=T)
### PRIOR
curve(dbeta(x,1,1),ylim=c(0,5),ylab="Prob Density",col="blue",lwd=2,xlab="param.space")
### POSTERIOR
curve(dbeta(x,1+data,1+(10-data)),ylim=c(0,4),ylab="Prob Density",col="blue",lwd=2,lty=2,xlab="param.space",add=T)
### PRIOR
curve(dbeta(x,15,5),ylim=c(0,5),ylab="Prob Density",col="blue",lwd=2,xlab="param.space")
### POSTERIOR
curve(dbeta(x,15+data,5+(10-data)),ylim=c(0,4),ylab="Prob Density",col="blue",lwd=2,lty=2,xlab="param.space",add=T)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
read.csv("ReedfrogPred.csv")
head(df)
df <- read.csv("ReedfrogPred.csv")
head(df)
rfp <- read.csv("ReedfrogPred.csv")
head(rfp)
rfp_sub <- subset(rfp, rfp$pred==”pred” & rfp$size=="small" &
rfp$density==10)
rfp_sub <- subset(rfp, (rfp$pred==”pred”)&(rfp$size=="small")&(rfp$density==10))
rfp_sub <- subset(rfp, (rfp$pred=='pred')&(rfp$size=="small")&(rfp$density==10))
rfp_sub
k <- rfp_sub$surv
dbinom(k,size=10,prob=0.5)
for(i in 1:100) {
Lik[i] <- prod(dbinom(rfp_sub$numdead,size=10,prob=p[i]))
}
plot(Lik~p,lty="solid",type="l", xlab="Predation Probability", ylab="Likelihood")
p <- seq(0.01, 1, by=0.01)
Lik <- numeric(length=100)
for(i in 1:100) {
Lik[i] <- prod(dbinom(rfp_sub$numdead,size=10,prob=p[i]))
}
plot(Lik~p,lty="solid",type="l", xlab="Predation Probability", ylab="Likelihood")
prod(dbinom(k,size=10,prob=0.5))
p <- seq(0.01, 1, by=0.01)
Lik <- numeric(length=100)
for(i in 1:100){
Lik[i] <- prod(dbinom(rfp_sub$numdead,size=10,prob=p[i]))
}
rfp_sub$numdead
rfp_sub
num_killed <- 1-rfp_sub$surv
num_killed
num_killed <- 10-rfp_sub$surv
num_killed
dbinom(num_killed,size=10,prob=0.5)
p <- seq(0.01, 1, by=0.01)
Lik <- numeric(length=100)
for(i in 1:100){
Lik[i] <- prod(dbinom(num_killed,size=10,prob=p[i]))
}
plot(Lik~p,lty="solid",type="l", xlab="Predation Probability", ylab="Likelihood")
p <- seq(0.01, 1, by=0.01)
LogLik <- numeric(length=100)
for(i in 1:100){
LogLik[i] <- sum(dbinom(num_killed, size=10,
prob=p[i],log=TRUE))
}
plot(LogLik~p,lty="solid",type="l", xlab="Predation Probability", ylab="Log Likelihood")
plot(LogLik~p,lty="solid",type="l", xlab="Predation Probability", ylab="Log Likelihood")
abline(v=0.75,lwd=3)
p[which(LogLik==max(LogLik))]
plot(LogLik~p,lty="solid",type="l", xlab="Predation Probability", ylab="Log Likelihood")
abline(v=0.25,lwd=3)
abline(v=0.25,lwd=3)
plot(LogLik~p,lty="solid",type="l", xlab="Predation Probability", ylab="Log Likelihood")
abline(v=0.25,lwd=3)
binomNLL1 <- function(p, k, N) {
-sum(dbinom(k, size=N, prob=p, log=TRUE))
}
opt1 <- optim(fn=binomNLL1, par = c(p=0.5), N = 10, k = k, method = "BFGS")
num_killed
rffr <- read.csv("ReedfrogFuncResp.csv")
hist(rffr$Killed/rffr$Initial)
Holl2<-function(x, a, h){(a*x)/(1+(a*h*x))}
plot(rffr$Killed~rffr$Initial)
Holl2<-function(x, a, h){(a*x)/(1+(a*h*x))}
plot(rffr$Killed~rffr$Initial)
curve(Holl2(x, a=0.5, h=1/80), add=TRUE)
Holl2<-function(x, a, h){(a*x)/(1+(a*h*x))}
plot(rffr$Killed~rffr$Initial)
curve(Holl2(x, a=0.5, h=1/80), add=TRUE,col="red")
opt2 <- optim(fn=binomNLL2,  par=c(a=0.5,h=(1/80)), N=rffr$Initial, k=rffr$Killed)
binomNLL2<-function(params,N,k){
a=params[1]
h=params[2]
predprob=a/(1+a*h*N)
-sum(dbinom(k,prob=predprob,size=N,log=TRUE))
}
opt2 <- optim(fn=binomNLL2,  par=c(a=0.5,h=(1/80)), N=rffr$Initial, k=rffr$Killed)
opt2
optim
?optim
library(emdbook)
data(MyxoTiter_sum)
head(MyxoTiter_sum)
myxdat <- subset(MyxoTiter_sum, grade==1)
myxdat
plot(myxdat$titer~myxdat$day)
k
prod(dbinom(k,size=10,prob=0.5))
install.packages(c("diagram", "shape"))
install.packages("DiagrammeR")
install.packages("ggm")
install.packages("QuantPsyc")
install.packages("piecewiseSEM")
install.packages(c("lavaan", "semPlot"))
