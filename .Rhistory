decline <- logical(nreps)
decline
SimulateMonitoringData <- function(initabund=1000,trend=-0.03,years=25,observers=1,days=3,survint=2){
prevabund <- initabund
detected <- numeric(years)     # set up storate variable
for(y in 1:years){
thisAbund <- ThisYearAbund(prevabund,trend)             # compute the current abundance on the basis of the trend
detected[y] <- NumObserved(thisAbund,observers,days)     # sample the current population using this monitoring scheme
prevabund <- thisAbund   # this years abundance becomes the previous years abundance
}
surveyed <- c(1:years)%%survint==0    # which years were surveys actually performed?
detected[!surveyed] <- NA
return(detected)
}
SimulateMonitoringData(initabund=1000,trend=-0.03,years=25,observers=1,days=3,survint=2)
observers=1
days=3
alpha=0.05
years=25
survint=2
trend=-0.03
decline <- logical(nreps)
nreps <- 1000
initabund <- 1000
decline <- logical(nreps)
SimulateMonitoringData(initabund,trend,years,observers,days,survint)
detected <- SimulateMonitoringData(initabund,trend,years,observers,days,survint)
decline <- IsDecline(detected,alpha)
nreps <- 1000
initabund <- 1000
GetPower <- function(observers=1,days=3,alpha=0.05,years=25,survint=2,trend=-0.03){
decline <- logical(nreps)
for(i in 1:nreps){
detected <- SimulateMonitoringData(initabund,trend,years,observers,days,survint)
decline[i] <- IsDecline(detected,alpha)
}
Power <- length(which(decline=TRUE))/nreps
return(Power)
}
GetPower()
nreps <- 1000
initabund <- 1000
GetPower <- function(observers=1,days=3,alpha=0.05,years=25,survint=2,trend=-0.03){
decline <- logical(nreps)
for(i in 1:nreps){
detected <- SimulateMonitoringData(initabund,trend,years,observers,days,survint)
decline[i] <- IsDecline(detected,alpha)
}
Power <- length(which(decline==TRUE))/nreps
return(Power)
}
GetPower()
nreps <- 1000
initabund <- 100
GetPower <- function(observers=1,days=3,alpha=0.05,years=25,survint=2,trend=-0.03){
decline <- logical(nreps)
for(i in 1:nreps){
detected <- SimulateMonitoringData(initabund,trend,years,observers,days,survint)
decline[i] <- IsDecline(detected,alpha)
}
Power <- length(which(decline==TRUE))/nreps
return(Power)
}
GetPower()    # for default
detected
cat((sprintf("The statistical power to detect a decline for the default parameters is: %s",GetPower())))    # for default
powers <- numeric(0)
initabund = 1000
survints <- c(1,2,3,4,5)
survints <- c(1,2,3,4,5)
powers <- numeric(length(survints))
initabund = 1000
survints <- c(1,2,3,4,5)
powers <- numeric(length(survints))
for(i in 1:length(survints)){
powers[i] <- GetPower(survint=survints[i])
}
plot(powers~survints)
initabund = 1000
survints <- c(1:10)
powers <- numeric(length(survints))
i=1
powers[i] <- GetPower(survint=survints[i])
i=7
survints[i]
powers[i] <- GetPower(survint=survints[i])
survints <- c(1:6)
i=6
powers[i] <- GetPower(survint=survints[i])
survint
survint
i=6
survint=survints[i]
survint
SimulateMonitoringData(initabund,trend,years,observers,days,survint)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
plot(trees$Volume~trees$Girth)
plot(trees$Volume~trees$Volume)
plot(trees$Volume~trees$Volume)
plot(trees$Volume~trees$Height)
xvalues <- c(1.6,2.1,2,2.23,3.71,3.25,3.4,3.86,1.19,2.21)
yvalues <- c(5.19,7.43,6.94,8.11,18.75,14.88,16.06,19.12,3.21,7.58)
yvalues <- c(5.19,7.43,6.94,8.11,18.75,14.88,16.06,19.12,3.21,7.58)
plot(yvalues~xvalues)
xvalues=c(200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500,2600,2700,2800,2900,3000,3100,3200,3300,3400,3500,3600,3700,3800,3900,4000,4100,4200,4300,4400,4500,4600,4700,4800,4900,5000,5100,5200,5300,5400,5500,5600,5700,5800,5900,6000,6100,6200,6300,6400,6500,6600,6700,6800,6900,7000)
yvalues=c(50,150,350,550,1050,1650,2950,4750,7850,12350,18950,27250,36750,49750,63250,79050,95450,112850,134550,158050,184650,211150,237750,270150,299650,334850,373450,413050,453050,490350,534250,574050,622750,666550,707350,760250,803050,848650,893850,928250,973850,1006250,1047650,1075850,1113850,1146350,1180150,1212650,1243950,1275850,1306250,1332150,1372350,1402550,1440650,1471550,1503550,1549850,1583150,1628850,1664250,1711250,1746850,1793250,1837950,1884750,1930850,1976750,2008650)
plot(yvalues~xvalues)
head(mtcars)
plot(mpg~disp, data = mtcars, las = 1, pch = 16, xlab = "Displacement", ylab = "Log(Miles/Gallon)")
plot(mpg~disp, data = mtcars, las = 1, pch = 16, xlab = "Displacement", ylab = "Miles/Gallon")
?mtcars
exp(1)
xvals=mtcars$disp
params <- list()
params$a=30
params$b=-2
params$c=100
InitVal <- params$a
DeclineRate <- params$b
Variance <- params$c
Deterministic_component <- InitVal*exp(DeclineRate*xvals)
Deterministic_component
InitVal
DeclineRate
yvals <- rnorm(Deterministic_component,sqrt(Variance))
yvals
Deterministic_component
xvals=mtcars$disp
params <- list()
params$a=30
params$b=-0.002
params$c=100
InitVal <- params$a
DeclineRate <- params$b
Variance <- params$c
Deterministic_component <- InitVal*exp(DeclineRate*xvals)
yvals <- rnorm(length(Deterministic_component),Deterministic_component,sqrt(Variance))
yvals
DataGenerator_exp <- function(xvals,params){
InitVal <- params$a        # unpack the parameters
DeclineRate <- params$b
Variance <- params$c
Deterministic_component <- InitVal*exp(DeclineRate*xvals)      # get signal
yvals <- rnorm(length(Deterministic_component),Deterministic_component,sqrt(Variance))     # add noise
return(yvals)
}
xvals=mtcars$disp    # xvals same as data (this is a "fixed effect", so there is no random component here- we can't really "sample" x values)
params <- list()
params$a=30
params$b=-0.002
params$c=100
yvals <- DataGenerator_exp(xvals,params)
plot(yvals~xvals)
xvals=mtcars$disp    # xvals same as data (this is a "fixed effect", so there is no random component here- we can't really "sample" x values)
params <- list()
params$a=30
params$b=-0.01
params$c=100
yvals <- DataGenerator_exp(xvals,params)
plot(yvals~xvals)
xvals=mtcars$disp    # xvals same as data (this is a "fixed effect", so there is no random component here- we can't really "sample" x values)
params <- list()
params$a=30
params$b=-0.05
params$c=50
yvals <- DataGenerator_exp(xvals,params)
plot(yvals~xvals)
xvals=mtcars$disp    # xvals same as data (this is a "fixed effect", so there is no random component here- we can't really "sample" x values)
params <- list()
params$a=30
params$b=-0.05
params$c=1
yvals <- DataGenerator_exp(xvals,params)
plot(yvals~xvals)
InitVal <- params$a        # unpack the parameters
DeclineRate <- params$b
Variance <- params$c
Deterministic_component <- InitVal*exp(DeclineRate*xvals)      # get signal
Deterministic_component
DeclineRate*xvals
curve(20*exp(-0.1*x))
xvals=mtcars$disp    # xvals same as data (this is a "fixed effect", so there is no random component here- we can't really "sample" x values)
params <- list()
params$a=30
params$b=-0.005
params$c=1
yvals <- DataGenerator_exp(xvals,params)
plot(yvals~xvals)
xvals=mtcars$disp    # xvals same as data (this is a "fixed effect", so there is no random component here- we can't really "sample" x values)
params <- list()
params$a=30
params$b=-0.005
params$c=1
yvals <- DataGenerator_exp(xvals,params)
yvals
plot(yvals~xvals)
?boxplot
reps=1000
samplesize <- length(xvals)
results <- array(0,dim=c(samplesize,reps))   # storage array for results
for(i in 1:reps){
yvals <- DataGenerator_exp(xvals,params)
results[,i] <- yvals
}
boxplot(lapply(1:nrow(results), function(i) results[i,]),at=xvals)
colnames(results) <- xvals
rownames(results) <- xvals
boxplot(lapply(1:nrow(results), function(i) results[i,]),at=xvals)
boxplot(lapply(1:nrow(results), function(i) results[i,]),at=xvals, xaxt="n")
axis(1,at=xvals,labels=xvals)    # label the x axis properly
boxplot(lapply(1:nrow(results), function(i) results[i,]),at=xvals, xaxt="n")
axis(1,at=xvals,labels=xvals)    # label the x axis properly
seq(1,max(xvals),length=10)
max(round(xvals/100))
seq(0,max(round(xvals/100)),length=6)
cleanseq <- (seq(0,max(round(xvals/100)),length=6))*100
cleanseq <- (seq(0,max(round(xvals/100)),length=max(round(xvals/100)+1))*100
axis(1,at=cleanseq,length=10))    # label the x axis properly
cleanseq <- (seq(0,max(round(xvals/100)),length=(max(round(xvals/100)+1)))*100
axis(1,at=cleanseq,length=10))    # label the x axis properly
seq(0,max(round(xvals/100))
cleanseq <- (seq(0,max(round(xvals/100)),length=6))*100
cleanseq <- (seq(0,max(round(xvals/100)),length=6))*100
cleanseq <- (seq(0,max(round(xvals/100)),length=(max(round(xvals/100)))+1))*100
cleanseq
cleanseq <- (seq(0,max(round(xvals/100)),length=(max(round(xvals/100)))+1))*100
axis(1,at=cleanseq,labels = cleanseq)    # label the x axis properly
boxplot(lapply(1:nrow(results), function(i) results[i,]),at=xvals, xaxt="n")
cleanseq <- (seq(0,max(round(xvals/100)),length=(max(round(xvals/100)))+1))*100
axis(1,at=cleanseq,labels = cleanseq)    # label the x axis properly
PlotRangeOfPlausibleData <- function(xvals,params,reps){
samplesize <- length(xvals)
results <- array(0,dim=c(samplesize,reps))   # storage array for results
for(i in 1:reps){
yvals <- DataGenerator_exp(xvals,params)
results[,i] <- yvals
}
# now make a boxplot of the results
boxplot(lapply(1:nrow(results), function(i) results[i,]),at=xvals, xaxt="n",main="Plausible data under this model",ylab="mpg",xlab="Displacement")
cleanseq <- (seq(0,max(round(xvals/100)),length=(max(round(xvals/100)))+1))*100
axis(1,at=cleanseq,labels = cleanseq)    # label the x axis properly
}
PlotRangeOfPlausibleData(xvals,params,reps)
real_yvals <- mtcars$mpg
PlotRangeOfPlausibleData(xvals,params,reps)
points(xvals,real_yvals)
PlotRangeOfPlausibleData <- function(xvals,params,reps){
samplesize <- length(xvals)
results <- array(0,dim=c(samplesize,reps))   # storage array for results
for(i in 1:reps){
yvals <- DataGenerator_exp(xvals,params)
results[,i] <- yvals
}
# now make a boxplot of the results
boxplot(lapply(1:nrow(results), function(i) results[i,]),at=xvals, xaxt="n",main="Plausible data under this model",ylab="mpg",xlab="Displacement",boxwex=2)
cleanseq <- (seq(0,max(round(xvals/100)),length=(max(round(xvals/100)))+1))*100
axis(1,at=cleanseq,labels = cleanseq)    # label the x axis properly
}
PlotRangeOfPlausibleData(xvals,params,reps)
PlotRangeOfPlausibleData <- function(xvals,params,reps){
samplesize <- length(xvals)
results <- array(0,dim=c(samplesize,reps))   # storage array for results
for(i in 1:reps){
yvals <- DataGenerator_exp(xvals,params)
results[,i] <- yvals
}
# now make a boxplot of the results
boxplot(lapply(1:nrow(results), function(i) results[i,]),at=xvals, xaxt="n",main="Plausible data under this model",ylab="mpg",xlab="Displacement",boxwex=6)
cleanseq <- (seq(0,max(round(xvals/100)),length=(max(round(xvals/100)))+1))*100
axis(1,at=cleanseq,labels = cleanseq)    # label the x axis properly
}
reps <- 1000    # number of replicate datasets to generate
reps <- 1000    # number of replicate datasets to generate
PlotRangeOfPlausibleData(xvals,params,reps)
real_yvals <- mtcars$mpg
PlotRangeOfPlausibleData(xvals,params,reps)
points(xvals,real_yvals,pch=20,cex=3,col="green")
PlotRangeOfPlausibleData(xvals,params,reps)
points(xvals,real_yvals,pch=20,cex=3,col="green")    # overlay the real data
params$a=40       # was 30
params$b=-0.001   # was 0.005
PlotRangeOfPlausibleData(xvals,params,reps)
points(xvals,real_yvals,pch=20,cex=3,col="green")    # overlay the real data
params$a=32       # was 40
params$b=-0.003   # was 0.001
PlotRangeOfPlausibleData(xvals,params,reps)
points(xvals,real_yvals,pch=20,cex=3,col="green")    # overlay the real data
params$a=33       # was 40
params$b=-0.002   # was 0.001
PlotRangeOfPlausibleData(xvals,params,reps)
points(xvals,real_yvals,pch=20,cex=3,col="green")    # overlay the real data
xobx <- mtcars[1,]$disp
yobs <- mtcars[1,]$mpg
xobs
yobs
xobx <- mtcars[1,]$disp
yobs <- mtcars[1,]$mpg
xobs
yobs
xobs <- mtcars[1,]$disp
yobs <- mtcars[1,]$mpg
xobs
yobs
data <- mtcars[1,c("mpg","disp")]
data
data <- mtcars[1,c("mpg","disp")]
data
obs.data <- mtcars[1,c("mpg","disp")]
obs.data
params$c
params$a=33       # was 40
params$b=-0.002   # was 0.001
params$c=1
params
expected_val <- params$a*exp(params$b*obs.data$disp)
Deterministic_component(xvals,a,b){
yexp <- a*exp(b*xvals)      # get signal
return(yexp)
}
Deterministic_component(xvals,a,b){
yexp <- a*exp(b*xvals)
return(yexp)
}
DataGenerator_exp <- function(xvals,params){
yexp <- Deterministic_component(xvals,params$a,params$b)  # get signal
yvals <- rnorm(length(yexp),yexp,sqrt(params$c))     # add noise
return(yvals)
}
Deterministic_component(xvals,a,b){
yexp <- a*exp(b*xvals)
return(yexp)
}
Deterministic_component <- function(xvals,a,b){
yexp <- a*exp(b*xvals)
return(yexp)
}
DataGenerator_exp <- function(xvals,params){
yexp <- Deterministic_component(xvals,params$a,params$b)  # get signal
yvals <- rnorm(length(yexp),yexp,sqrt(params$c))     # add noise
return(yvals)
}
xvals=mtcars$disp    # xvals same as data (this is a "fixed effect", so there is no random component here- we can't really "sample" x values)
params <- list()
params$a=30
params$b=-0.005
params$c=1
yvals <- DataGenerator_exp(xvals,params)
plot(yvals~xvals)
PlotRangeOfPlausibleData <- function(xvals,params,reps){
samplesize <- length(xvals)
results <- array(0,dim=c(samplesize,reps))   # storage array for results
for(i in 1:reps){
yvals <- DataGenerator_exp(xvals,params)
results[,i] <- yvals
}
# now make a boxplot of the results
boxplot(lapply(1:nrow(results), function(i) results[i,]),at=xvals, xaxt="n",main="Plausible data under this model",ylab="mpg",xlab="Displacement",boxwex=6)
cleanseq <- (seq(0,max(round(xvals/100)),length=(max(round(xvals/100)))+1))*100
axis(1,at=cleanseq,labels = cleanseq)    # label the x axis properly
}
reps <- 1000    # number of replicate datasets to generate
PlotRangeOfPlausibleData(xvals,params,reps)
real_yvals <- mtcars$mpg
PlotRangeOfPlausibleData(xvals,params,reps)
points(xvals,real_yvals,pch=20,cex=3,col="green")
params$a=40       # was 30
params$b=-0.001   # was 0.005
PlotRangeOfPlausibleData(xvals,params,reps)
points(xvals,real_yvals,pch=20,cex=3,col="green")    # overlay the real data
params$a=33       # was 40
params$b=-0.002   # was 0.001
PlotRangeOfPlausibleData(xvals,params,reps)
points(xvals,real_yvals,pch=20,cex=3,col="green")    # overlay the real data
obs.data <- mtcars[1,c("mpg","disp")]
obs.data
params$a=33       # was 40
params$b=-0.002   # was 0.001
params$c=1
expected_val <- Deterministic_component(obs.data$disp,params$a,params$b)
expected_val
mean = expected_val   # 23.96
stdev = sqrt(params$c)
curve(dnorm(x,mean,stdev),0,40)   # probability density
curve(dnorm(x,mean,stdev),10,40)   # probability density
curve(dnorm(x,mean,stdev),15,30)   # probability density
curve(dnorm(x,mean,stdev),18,30)   # probability density
curve(dnorm(x,mean,stdev),18,30,xlab=mpg,ylab=probability density)   # probability density
abline(v=obs.data$mpg,col="red",lwd=2)
bs.data$mpg
obs.data$mpg
curve(dnorm(x,mean,stdev),18,30,xlab=mpg,ylab=probability density)   # probability density
curve(dnorm(x,mean,stdev),18,30,xlab="mpg",ylab="probability density")   # probability density
abline(v=obs.data$mpg,col="red",lwd=2)
likelihood = dnorm(obs.data$mpg,mean,stdev)
likelihood
obs.data <- mtcars[c(1,2),c("mpg","disp")]
obs.data
head(mtcars)
obs.data <- mtcars[c(1,3),c("mpg","disp")]
obs.data
for(i in 1:nrow(obs.data)){
curve(dnorm(x,Deterministic_component(obs.data$disp,params$a,params$b),sqrt(params$c)),18,30,xlab="mpg",ylab="probability density")   # probability density
abline(v=obs.data$mpg[i],col="red",lwd=2)
}
for(i in 1:nrow(obs.data)){
curve(dnorm(x,Deterministic_component(obs.data$disp[i],params$a,params$b),sqrt(params$c)),18,30,xlab="mpg",ylab="probability density")   # probability density
abline(v=obs.data$mpg[i],col="red",lwd=2)
}
par(mfrow=c(1,2))  # set up graphics!
for(i in 1:nrow(obs.data)){
curve(dnorm(x,Deterministic_component(obs.data$disp[i],params$a,params$b),sqrt(params$c)),18,30,xlab="mpg",ylab="probability density")   # probability density
abline(v=obs.data$mpg[i],col="red",lwd=2)
}
Likelihood <- dnorm(obs.data$mpg[1],Deterministic_component(obs.data$disp[1],params$a,params$b),sqrt(params$c)) *
dnorm(obs.data$mpg[2],Deterministic_component(obs.data$disp[2],params$a,params$b),sqrt(params$c))
Likelihood
obs.data <- mtcars[c(1,3),c("mpg","disp")]
obs.data
par(mfrow=c(1,2))  # set up graphics!
for(i in 1:nrow(obs.data)){
curve(dnorm(x,Deterministic_component(obs.data$disp[i],params$a,params$b),sqrt(params$c)),18,30,xlab="mpg",ylab="probability density")   # probability density
abline(v=obs.data$mpg[i],col="red",lwd=2)
}
obs.data <- mtcars[c(1,3,4,5),c("mpg","disp")]
obs.data
obs.data
obs.data <- mtcars[c(1,3,4,5),c("mpg","disp")]
obs.data
par(mfrow=c(2,2))  # set up graphics!
for(i in 1:nrow(obs.data)){
curve(dnorm(x,Deterministic_component(obs.data$disp[i],params$a,params$b),sqrt(params$c)),18,30,xlab="mpg",ylab="probability density")   # probability density
abline(v=obs.data$mpg[i],col="red",lwd=2)
}
obs.data <- mtcars[c(1,3,4,5),c("mpg","disp")]
obs.data
par(mfrow=c(2,2))  # set up graphics!
for(i in 1:nrow(obs.data)){
curve(dnorm(x,Deterministic_component(obs.data$disp[i],params$a,params$b),sqrt(params$c)),10,30,xlab="mpg",ylab="probability density")   # probability density
abline(v=obs.data$mpg[i],col="red",lwd=2)
}
mean = expected_val   # 23.96
stdev = sqrt(params$c)
curve(dnorm(x,mean,stdev),10,30,xlab="mpg",ylab="probability density")   # probability density
abline(v=obs.data$mpg,col="red",lwd=2)
obs.data <- mtcars[1,c("mpg","disp")]
obs.data
############
# "best fit" parameters from above
############
params$a=33       # was 40
params$b=-0.002   # was 0.001
params$c=1
params
expected_val <- Deterministic_component(obs.data$disp,params$a,params$b)
expected_val
mean = expected_val   # 23.96
stdev = sqrt(params$c)
curve(dnorm(x,mean,stdev),10,30,xlab="mpg",ylab="probability density")   # probability density
abline(v=obs.data$mpg,col="red",lwd=2)
Likelihood <- dnorm(obs.data$mpg[1],Deterministic_component(obs.data$disp[1],params$a,params$b),sqrt(params$c)) *
dnorm(obs.data$mpg[2],Deterministic_component(obs.data$disp[2],params$a,params$b),sqrt(params$c))
Likelihood
obs.data <- mtcars[c(1,3,4,5),c("mpg","disp")]
obs.data
par(mfrow=c(2,2))  # set up graphics!
for(i in 1:nrow(obs.data)){
curve(dnorm(x,Deterministic_component(obs.data$disp[i],params$a,params$b),sqrt(params$c)),10,30,xlab="mpg",ylab="probability density")   # probability density
abline(v=obs.data$mpg[i],col="red",lwd=2)
}
Likelihood <- 1     # initialize the likelihood
for(i in 1:nrow(obs.data)){
Likelihood <- Likelihood * dnorm(obs.data$mpg[i],Deterministic_component(obs.data$disp[i],params$a,params$b),sqrt(params$c))
}
Likelihood
Likelihood <- prod(dnorm(obs.data$mpg,Deterministic_component(obs.data$disp,params$a,params$b),sqrt(params$c)))
Likelihood <- prod(dnorm(obs.data$mpg,Deterministic_component(obs.data$disp,params$a,params$b),sqrt(params$c)))
Likelihood
full.data <- mtcars[,c("mpg","disp")]
full.data
full.data <- mtcars[,c("mpg","disp")]
Likelihood <- prod(dnorm(full.data$mpg,Deterministic_component(full.data$disp,params$a,params$b),sqrt(params$c)))
Likelihood
Log.Likelihood <- sum(dnorm(full.data$mpg,Deterministic_component(full.data$disp,params$a,params$b),sqrt(params$c),log=TRUE))
Log.Likelihood
exp(Log.Likelihood)
exp(Log.Likelihood)   # we can convert back to likelihood...
?optim
unlist(params)
LogLikFunction <- function(params,df,yvar,xvar){
LogLik <- sum(dnorm(df[,yvar],Deterministic_component(df[,xvar],params['a'],params['b']),sqrt(params['c']),log=TRUE))
return(LogLik)
}
LogLikFunction(unlist(params),df=mtcars,yvar="mpg",xvar="disp")
Log.Likelihood
MLE <- optim(fn=LogLikFunction,par=unlist(params),df=mtcars,yvar="mpg",xvar="disp")
unlist(params)
MLE <- optim(fn=LogLikFunction,par=unlist(params),df=mtcars,yvar="mpg",xvar="disp")
MLE <- optim(fn=LogLikFunction,par=unlist(params),df=mtcars,yvar="mpg",xvar="disp",control=list(fnscale=-1))
MLE
MLE$par
MLE$value
bestParams <- as.list(MLE$par)
bestParams
xvals=mtcars$disp
yvals <- mtcars$mpg
xvals=mtcars$disp
bestParams <- as.list(MLE$par)
xvals=mtcars$disp
yvals <- mtcars$mpg
PlotRangeOfPlausibleData(xvals,bestParams,1000)
points(xvals,yvals,pch=20,cex=3,col="green")
1/200
