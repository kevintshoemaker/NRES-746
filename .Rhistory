loglikelihood_surface[i,j] <- LogLikFunction(unlist(newParams),mtcars,"mpg","disp")    # get the data likelihood across slice of parameter space
}
}
image(loglikelihood_surface)
MLE$value
image(loglikelihood_surface,zlim=c(-150,-75))
upperval_b <- -1/700
lowerval_b <- -1/350
upperval_a <- 45
lowerval_a <- 25
allvals_a <- seq(lowerval_a,upperval_a,length=100)
allvals_b <- seq(lowerval_b,upperval_b,length=100)
loglikelihood_surface <- matrix(0,nrow=100,ncol=100)   # set up storage matrix!
newParams <- bestParams
for(i in 1:length(allvals_a)){  # loop through possible a params
newParams$a <- allvals_a[i]
for(j in 1:length(allvals_b)){    # loop through possible b params
newParams$b <- allvals_b[j]
loglikelihood_surface[i,j] <- LogLikFunction(unlist(newParams),mtcars,"mpg","disp")    # get the data likelihood across slice of parameter space
}
}
image(loglikelihood_surface,zlim=c(-150,-75))
image(loglikelihood_surface,zlim=c(-110,-75))
image(loglikelihood_surface,zlim=c(-100,-75))
image(loglikelihood_surface,zlim=c(-100,-75),col=terrain.colors(12))
image(loglikelihood_surface,zlim=c(-100,-75),col=topo.colors(12))
image(x=allvals_b,y=allvals_a,z=loglikelihood_surface,zlim=c(-100,-75),col=topo.colors(12))
?contour
conf95 <- qchisq(0.95,2)
conf95
conf95 <- qchisq(0.95,2)/2
conf95
qchisq(0.95,1)/2
conf95 <- qchisq(0.95,2)/2
conf95 <- qchisq(0.95,2)/2
image(x=allvals_b,y=allvals_a,z=loglikelihood_surface,zlim=c(-100,-75),col=topo.colors(12))
contour(x=allvals_b,y=allvals_a,z=loglikelihood_surface,levels=(MLE$value-conf95),add=TRUE)
conf95 <- qchisq(0.95,2)/2
image(x=allvals_b,y=allvals_a,z=loglikelihood_surface,zlim=c(-100,-75),col=topo.colors(12))
contour(x=allvals_b,y=allvals_a,z=loglikelihood_surface,levels=(MLE$value-conf95),add=TRUE,lwd=3,col=gray(0.3))
upperval_b <- -1/700
lowerval_b <- -1/350
upperval_a <- 45
lowerval_a <- 15
allvals_a <- seq(lowerval_a,upperval_a,length=100)
allvals_b <- seq(lowerval_b,upperval_b,length=100)
loglikelihood_surface <- matrix(0,nrow=100,ncol=100)   # set up storage matrix!
newParams <- bestParams
for(i in 1:length(allvals_a)){  # loop through possible a params
newParams$a <- allvals_a[i]
for(j in 1:length(allvals_b)){    # loop through possible b params
newParams$b <- allvals_b[j]
loglikelihood_surface[i,j] <- LogLikFunction(unlist(newParams),mtcars,"mpg","disp")    # get the data likelihood across slice of parameter space
}
}
image(x=allvals_b,y=allvals_a,z=loglikelihood_surface,zlim=c(-100,-75),col=topo.colors(12))
conf95 <- qchisq(0.95,2)/2
image(x=allvals_b,y=allvals_a,z=loglikelihood_surface,zlim=c(-100,-75),col=topo.colors(12))
contour(x=allvals_b,y=allvals_a,z=loglikelihood_surface,levels=(MLE$value-conf95),add=TRUE,lwd=3,col=gray(0.3))
upperval_b <- -1/700
lowerval_b <- -1/350
upperval_a <- 50
lowerval_a <- 10
allvals_a <- seq(lowerval_a,upperval_a,length=100)
allvals_b <- seq(lowerval_b,upperval_b,length=100)
loglikelihood_surface <- matrix(0,nrow=100,ncol=100)   # set up storage matrix!
newParams <- bestParams
for(i in 1:length(allvals_a)){  # loop through possible a params
newParams$a <- allvals_a[i]
for(j in 1:length(allvals_b)){    # loop through possible b params
newParams$b <- allvals_b[j]
loglikelihood_surface[i,j] <- LogLikFunction(unlist(newParams),mtcars,"mpg","disp")    # get the data likelihood across slice of parameter space
}
}
image(x=allvals_b,y=allvals_a,z=loglikelihood_surface,zlim=c(-100,-75),col=topo.colors(12))
conf95 <- qchisq(0.95,2)/2
image(x=allvals_b,y=allvals_a,z=loglikelihood_surface,zlim=c(-100,-75),col=topo.colors(12))
contour(x=allvals_b,y=allvals_a,z=loglikelihood_surface,levels=(MLE$value-conf95),add=TRUE,lwd=3,col=gray(0.3))
upperval_b <- -1/800
lowerval_b <- -1/300
upperval_a <- 50
lowerval_a <- 5
allvals_a <- seq(lowerval_a,upperval_a,length=100)
allvals_b <- seq(lowerval_b,upperval_b,length=100)
loglikelihood_surface <- matrix(0,nrow=100,ncol=100)   # set up storage matrix!
newParams <- bestParams
for(i in 1:length(allvals_a)){  # loop through possible a params
newParams$a <- allvals_a[i]
for(j in 1:length(allvals_b)){    # loop through possible b params
newParams$b <- allvals_b[j]
loglikelihood_surface[i,j] <- LogLikFunction(unlist(newParams),mtcars,"mpg","disp")    # get the data likelihood across slice of parameter space
}
}
image(x=allvals_b,y=allvals_a,z=loglikelihood_surface,zlim=c(-100,-75),col=topo.colors(12))
conf95 <- qchisq(0.95,2)/2
image(x=allvals_b,y=allvals_a,z=loglikelihood_surface,zlim=c(-100,-75),col=topo.colors(12))
contour(x=allvals_b,y=allvals_a,z=loglikelihood_surface,levels=(MLE$value-conf95),add=TRUE,lwd=3,col=gray(0.3))
trees
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
inputvector <- c(1:100) # vector of interest
div_by_three <- 0
for(i in 1:length(inputvector)){
if(i%%3==0){  # if there is zero remainder after dividing by three
div_by_three <- div_by_three+1   # then increment the storage variable
}
}
div_by_three
which(c(FALSE,TRUE,TRUE,FALSE))
div_by_three <- length(which(inputvector%%3==0))
div_by_three
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
curve(dchisq(x,2))
curve(dchisq(x,2),0,10)
curve(dchisq(x,2),0,10,ylab="probability density",xlab="x")
curve(dchisq(x,2),0,10,ylab="probability density",xlab="x", main="Chi-Squared distribution, df=2")
curve(dchisq(x,2),0,10,ylab="probability density",xlab="x", main="Chi-Squared distribution, df=2")
abline(v=qchisq(0.95,2),col=red,lwd=2)
curve(dchisq(x,2),0,10,ylab="probability density",xlab="x", main="Chi-Squared distribution, df=2")
abline(v=qchisq(0.95,2),col="red"",lwd=2)
curve(dchisq(x,2),0,10,ylab="probability density",xlab="x", main="Chi-Squared distribution, df=2")
abline(v=qchisq(0.95,2),col="red",lwd=2)
qchisq(0.95,2)
curve(dchisq(x,2),0,10,ylab="probability density",xlab="x", main="Chi-Squared distribution, df=2")
abline(v=qchisq(0.95,2),col="red",lwd=2)
curve(dchisq(x,1),0,5,ylab="probability density",xlab="x", main="Chi-Squared distribution, df=1")
abline(v=qchisq(0.95,1),col="red",lwd=2)
qchisq(0.95,1)
qchisq(0.95,1)/2
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(emdbook)
install.packages("emdbook")
library(emdbook)
data("MyxoTiter_sum")
MyxData <- data("MyxoTiter_sum")
head(MyxData)
MyxData <- data(MyxoTiter_sum)
MyxData <- data(MyxoTiter_sum)
head(MyxData)
MyxoTiter_sum
MyxData <- MyxoTiter_sum
Myx <- MyxoTiter_sum
head(Myx)
MyxDat <- MyxoTiter_sum
Myx <- subset(MyxDat,grade==1)
head(Myx)
hist(Myx$titer,freq=FALSE)
hist(Myx$titer,freq=FALSE)
curve(dgamma(x,45.8,0.151),add=T,col="red")
hist(Myx$titer,freq=FALSE)
curve(dgamma(x,scale=45.8,shape=0.151),add=T,col="red")
dgamma
curve(dgamma(x,shape=45.8,scale=0.151),add=T,col="red")
hist(Myx$titer,freq=FALSE)
curve(dgamma(x,shape=45.8,scale=0.151),add=T,col="red")
GammaLikelihoodFunction <- function(shape,scale){
sum(dgamma(Myx$titer,shape=shape,scale=scale,log=T))
}
GammaLikelihoodFunction(shape=45.8,scale=0.151)
optim
params <- c(45.8,0.151)
names(params) <- c(shape= scale)
names(params) <- c("shape","scale")
params
GammaLikelihoodFunction(params)
GammaLikelihoodFunction <- function(params){
sum(dgamma(Myx$titer,shape=params['shape'],scale=params['scale'],log=T))
}
params <- c(45.8,0.151)
names(params) <- c("shape","scale")
params
GammaLikelihoodFunction(params)
ctrl <- list(fnscale=-1)   # maximize rather than minimize!!
MLE <- optim(fn=GammaLikelihoodFunction,par=params,control=ctrl)
MLE
?optim
MLE <- optim(fn=GammaLikelihoodFunction,par=params,control=ctrl,method="BFGS")
MLE
MLE$par
hist(Myx$titer,freq=FALSE)
curve(dgamma(x,shape=MLE$par["shape"],scale=MLE$par["scale"]),add=T,col="red")
hist(Myx$titer,freq=FALSE)
curve(dgamma(x,shape=40,scale=0.15),add=T,col="red")
params <- c(40,0.15)
names(params) <- c("shape","scale")
params
GammaLikelihoodFunction(params)
ctrl <- list(fnscale=-1)   # maximize rather than minimize!!
MLE <- optim(fn=GammaLikelihoodFunction,par=params,control=ctrl,method="BFGS")
MLE$par
hist(Myx$titer,freq=FALSE)
curve(dgamma(x,shape=MLE$par["shape"],scale=MLE$par["scale"]),add=T,col="red")
newparams <- params
##############
# define 2-D parameter space!
##############
shapevec <- 10:100
scalevec <- seq(0.01,0.3,by=0.1)
##############
# define the likelihood surface across this grid within parameter space
##############
surface <- matrix(nrow=length(shapevec),ncol=length(scalevec))   # initialize storage variable
newparams <- params
for(i in 1:length(shapevec)){
newparams['shape'] <- shapevec[i]
for(j in 1:length(scalevec)){
newparams['scale'] <- scalevec[j]
surface[i,j] <- GammaLikelihoodFunction(newparams)
}
}
############
# draw contour plot for likelihood surface
############
contour(shapevec,scalevec,log10(surface))
shapevec <- 10:100
scalevec <- seq(0.01,0.3,by=0.1)
surface <- matrix(nrow=length(shapevec),ncol=length(scalevec))   # initialize storage variable
newparams <- params
for(i in 1:length(shapevec)){
newparams['shape'] <- shapevec[i]
for(j in 1:length(scalevec)){
newparams['scale'] <- scalevec[j]
surface[i,j] <- GammaLikelihoodFunction(newparams)
}
}
surface
contour(shapevec,scalevec,surface
contour(shapevec,scalevec,surface)
GammaLikelihoodFunction
contour(shapevec,scalevec,surface)
MLL
MLE
image(x=shapevec,y=scalevec,z=surface,zlim=c(-5000,-30),col=topo.colors(12))
max(surface)
image(x=shapevec,y=scalevec,z=surface,zlim=c(-1000,-30),col=topo.colors(12))
shapevec
scalevec
shapevec <- 10:100
scalevec <- seq(0.01,0.3,by=0.01)
surface <- matrix(nrow=length(shapevec),ncol=length(scalevec))   # initialize storage variable
newparams <- params
for(i in 1:length(shapevec)){
newparams['shape'] <- shapevec[i]
for(j in 1:length(scalevec)){
newparams['scale'] <- scalevec[j]
surface[i,j] <- GammaLikelihoodFunction(newparams)
}
}
shapevec <- seq(10,100,by=0.5)
scalevec <- seq(0.01,0.3,by=0.01)
surface <- matrix(nrow=length(shapevec),ncol=length(scalevec))   # initialize storage variable
newparams <- params
for(i in 1:length(shapevec)){
newparams['shape'] <- shapevec[i]
for(j in 1:length(scalevec)){
newparams['scale'] <- scalevec[j]
surface[i,j] <- GammaLikelihoodFunction(newparams)
}
}
image(x=shapevec,y=scalevec,z=surface,zlim=c(-1000,-30),col=topo.colors(12))
shapevec <- seq(10,100,by=0.1)
scalevec <- seq(0.01,0.3,by=0.001)
surface <- matrix(nrow=length(shapevec),ncol=length(scalevec))   # initialize storage variable
newparams <- params
for(i in 1:length(shapevec)){
newparams['shape'] <- shapevec[i]
for(j in 1:length(scalevec)){
newparams['scale'] <- scalevec[j]
surface[i,j] <- GammaLikelihoodFunction(newparams)
}
}
image(x=shapevec,y=scalevec,z=surface,zlim=c(-1000,-30),col=topo.colors(12))
?contour
contour(x=shapevec,y=scalevec,z=surface,levels=c(-30,-100,-500,-1000,-2000,-5000,-8000))
image(x=shapevec,y=scalevec,z=surface,zlim=c(-1000,-30),col=topo.colors(12))
contour(x=shapevec,y=scalevec,z=surface,levels=c(-30,-100,-500,-1000,-2000,-5000,-8000),add=T)
image(x=shapevec,y=scalevec,z=surface,zlim=c(-1000,-30),col=topo.colors(12))
contour(x=shapevec,y=scalevec,z=surface,levels=c(-30,-50,-100,-500,-1000,-2000,-5000),add=T)
image(x=shapevec,y=scalevec,z=surface,zlim=c(-1000,-30),col=topo.colors(12))
contour(x=shapevec,y=scalevec,z=surface,levels=c(-30,-40,-80,-500,-1000,-2000,-5000),add=T)
image(x=shapevec,y=scalevec,z=surface,zlim=c(-1000,-30),col=topo.colors(12))
contour(x=shapevec,y=scalevec,z=surface,levels=c(-30,-40,-80,-500),add=T)
D
?D
params <- MLE$par
params
newParams
newparams
GammaLikelihoodFunction(params)
high <- GammaLikelihoodFunction(params+c(tiny,0))
tiny=0.001
newparams <- params
shape_guess=30
high <- GammaLikelihoodFunction(params+c(tiny,0))
low <- GammaLikelihoodFunction(params-c(tiny,0))
low
high
MLE
params
params['shape'] <- shape_guess
high <- GammaLikelihoodFunction(params+c(tiny,0))
low <- GammaLikelihoodFunction(params-c(tiny,0))
high
low
params <- MLE$par
SlopeFunc <- function(shape_guess,tiny=0.001){
params['shape'] <- shape_guess
high <- GammaLikelihoodFunction(params+c(tiny,0))
low <- GammaLikelihoodFunction(params-c(tiny,0))
slope <- (high-low)/(tiny*2)
return(slope)
}
SlopeFunc(shape_guess=30)
params <- MLE$par
shapevec <- seq(10,100,by=0.1)
##############
# define the likelihood surface
##############
surface <- numeric(length(shapevec))   # initialize storage variable
newparams <- params
for(i in 1:length(shapevec)){
newparams['shape'] <- shapevec[i]
surface[i] <- GammaLikelihoodFunction(newparams)
}
plot(surface~shapevec)
plot(surface~shapevec,type="l")
SlopeFunc(shape_guess=30)
##############
# define 2-D parameter space!
##############
shapevec <- seq(10,100,by=0.1)
scalevec <- seq(0.01,0.3,by=0.001)
##############
# define the likelihood surface across this grid within parameter space
##############
surface <- matrix(nrow=length(shapevec),ncol=length(scalevec))   # initialize storage variable
newparams <- params
for(i in 1:length(shapevec)){
newparams['shape'] <- shapevec[i]
for(j in 1:length(scalevec)){
newparams['scale'] <- scalevec[j]
surface[i,j] <- GammaLikelihoodFunction(newparams)
}
}
############
# Visualize the likelihood surface
############
image(x=shapevec,y=scalevec,z=surface,zlim=c(-1000,-30),col=topo.colors(12))
contour(x=shapevec,y=scalevec,z=surface,levels=c(-30,-40,-80,-500),add=T)
which.max(surface)
which.max(surface,arr.ind=T)
max(surface,arr.ind=T)
?max
?which
MLE
which(surface>-38,arr.ind=T)
which(surface==max(surface),arr.ind=T)
ndx <- which(surface==max(surface),arr.ind=T)
shapevec[ndx[,1]]
scalevec[ndx[,2]]
point <- GammaLikelihoodFunction(c(30,MLE$par['scale']))
point
MLE$par['scale']
c(30,MLE$par['scale'])
point <- GammaLikelihoodFunction(c(shape=30,MLE$par['scale']))
point
slope <- SlopeFunc(shape_guess=30)
plot(surface~shapevec,type="l")
point <- GammaLikelihoodFunction(c(shape=30,MLE$par['scale']))
slope <- SlopeFunc(shape_guess=30)
line(c(20,40),c(point-slope*10,point+slope*10),col="red")
c(point-slope*10,point+slope*10)
c(20,40)
line(c(20,40),c(point-slope*10,point+slope*10),col="red")
plot(surface~shapevec,type="l")
shapevec <- seq(10,100,by=0.1)
##############
# define the likelihood surface
##############
surface <- numeric(length(shapevec))   # initialize storage variable
newparams <- params
for(i in 1:length(shapevec)){
newparams['shape'] <- shapevec[i]
surface[i] <- GammaLikelihoodFunction(newparams)
}
plot(surface~shapevec,type="l")
point <- GammaLikelihoodFunction(c(shape=30,MLE$par['scale']))
slope <- SlopeFunc(shape_guess=30)
line(c(20,40),c(point-slope*10,point+slope*10),col="red")
plot(surface~shapevec,type="l")
point <- GammaLikelihoodFunction(c(shape=30,MLE$par['scale']))
slope <- SlopeFunc(shape_guess=30)
lines(c(20,40),c(point-slope*10,point+slope*10),col="red")
params <- MLE$par
CurvatureFunc <- function(shape_guess,tiny=0.001){
params['shape'] <- shape_guess
high <- SlopeFunc(shape_guess+tiny)
low <- SlopeFunc(shape_guess-tiny)
curvature <- (high-low)/(tiny*2)
return(curvature)
}
CurvatureFunc(shape_guess=30)
firstderiv <- numeric(length(shapevec))   # initialize storage variable
for(i in 1:length(shapevec)){
firstderiv[i] <- SlopeFunc(i)
}
plot(firstderiv~shapevec)
plot(firstderiv~shapevec,type="l")
plot(firstderiv~shapevec,type="l")
abline(h=0,col="red")
firstderiv <- SlopeFunc(40)
secondderiv <- CurvatureFunc(40)
firstderiv
secondderiv
newguess <- oldguess - firstderiv/secondderiv
oldguess <- 40
newguess <- oldguess - firstderiv/secondderiv
newguess
SlopeFunc(40)
firstderiv <- numeric(length(shapevec))   # initialize storage variable
for(i in 1:length(shapevec)){
firstderiv[i] <- SlopeFunc(shapevec[i])
}
plot(firstderiv~shapevec,type="l")
plot(firstderiv~shapevec,type="l")
abline(h=0,col="red")
MLE
firstderiv <- SlopeFunc(40)
secondderiv <- CurvatureFunc(40)
firstderiv
secondderiv
firstderiv <- SlopeFunc(80)
secondderiv <- CurvatureFunc(80)
firstderiv
secondderiv
oldguess <- 40
newguess <- oldguess - firstderiv/secondderiv
newguess
oldguess <- 1.31
newguess <- oldguess - SlopeFunc(oldguess)/CurvatureFunc(oldguess)
newguess
oldguess<-newguess
newguess <- oldguess - SlopeFunc(oldguess)/CurvatureFunc(oldguess)
newguess
oldguess<-newguess
newguess <- oldguess - SlopeFunc(oldguess)/CurvatureFunc(oldguess)
newguess
oldguess<-newguess
newguess <- oldguess - SlopeFunc(oldguess)/CurvatureFunc(oldguess)
newguess
deriv <- SlopeFunc(firstguess)
firstguess
firstguess=80
tolerance=0.0000001
NewtonMethod <- function(firstguess,tolerance=0.0000001){
deriv <- SlopeFunc(firstguess)
counter <- 0
while(abs(deriv)>tolerance){
oldguess<-newguess
deriv <- SlopeFunc(oldguess)
newguess <- oldguess - deriv/CurvatureFunc(oldguess)
counter=counter+1
}
mle <- list()
mle$estimate <- newguess
mle$likelihood <- GammaLikelihoodFunction(c(shape=newguess,MLE$par['scale']))
mle$iterations <- counter
return(mle)
}
NewtonMethod(firstguess=80)
oldguess <- firstguess
newguess <- firstguess
NewtonMethod <- function(firstguess,tolerance=0.0000001){
deriv <- SlopeFunc(firstguess)
oldguess <- firstguess
counter <- 0
while(abs(deriv)>tolerance){
oldguess<-newguess
deriv <- SlopeFunc(oldguess)
newguess <- oldguess - deriv/CurvatureFunc(oldguess)
counter=counter+1
}
mle <- list()
mle$estimate <- newguess
mle$likelihood <- GammaLikelihoodFunction(c(shape=newguess,MLE$par['scale']))
mle$iterations <- counter
return(mle)
}
newMLE <- NewtonMethod(firstguess=80)
newMLE
firstguess
deriv <- SlopeFunc(firstguess)
oldguess <- firstguess
counter <- 0
oldguess<-newguess
oldguess
deriv <- SlopeFunc(oldguess)
newguess <- oldguess - deriv/CurvatureFunc(oldguess)
newguess
SlopeFunc(oldguess)
oldguess <- 80
newguess <- oldguess - firstderiv/secondderiv
newguess
oldguess <- 41.31
newguess <- oldguess - SlopeFunc(oldguess)/CurvatureFunc(oldguess)
newguess
MLE
oldguess<-newguess
newguess <- oldguess - SlopeFunc(oldguess)/CurvatureFunc(oldguess)
newguess
oldguess<-newguess
newguess
newMLE
